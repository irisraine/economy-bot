import nextcord
import engine.bot as bot
import engine.sql as sql
import engine.messages as messages
import engine.utils as utils
import engine.config as config


def items():
    return {
        "track": {"price": config.PRICES['track'], "description": "–¢—Ä–µ–∫ –ø—Ä–æ –ª–µ—Ö—É"},
        "frog": {"price": config.PRICES['frog'], "description": "–§–æ—Ç–æ –ª—è–≥—É—à–∫–∏"},
        "cite": {"price": config.PRICES['cite'], "description": "–¶–∏—Ç–∞—Ç–∞ –¥–Ω—è"},
        "animal": {"price": config.PRICES['animal'], "description": "–ñ–∏–≤–æ—Ç–Ω–æ–µ"},
        "meme": {"price": config.PRICES['meme'], "description": "–ú–µ–º"},
        "food": {"price": config.PRICES['food'], "description": "–ï–¥–∞"},
        "soundpad": {"price": config.PRICES['soundpad'], "description": "–°–∞—É–Ω–¥–ø–∞–¥"},
        "drawing": {"price": config.PRICES['drawing'], "description": "–†–∏—Å—É–Ω–æ–∫"},
        "rain": {"price": config.PRICES['rain'], "description": "–î–æ–∂–¥—å –∏–∑ –ª—è–≥—É—à–µ–∫"},
        "event": {"price": config.PRICES['event'], "description": "–ò–≤–µ–Ω—Ç"},
        "role": {"price": config.PRICES['role'], "description": "–†–æ–ª—å"},
        "band": {"price": config.PRICES['band'], "description": "–ë–∞–Ω–¥–∞"},
    }

def probabilities():
    return {
        "common": int(config.PROBABILITIES['common'] * 100),
        "uncommon": int(config.PROBABILITIES['uncommon'] * 100),
        "epic": int(config.PROBABILITIES['epic'] * 100),
        "legendary": int(config.PROBABILITIES['legendary'] * 100)
    }

options = [
    nextcord.SelectOption(label=f"–ü–æ—Å–ª—É—à–∞—Ç—å —ç–ø–∏—á–Ω—ã–π —Ç—Ä–µ–∫ –ø—Ä–æ –õ–µ—Ö—É", value="track", emoji="üé∏"),
    nextcord.SelectOption(label=f"–õ—è–≥—É—à–∫–∞", value="frog", emoji="üê∏"),
    nextcord.SelectOption(label=f"–°–ª—É—á–∞–π–Ω–∞—è –º—É–¥—Ä–∞—è –º—ã—Å–ª—å –Ω–∞ –¥–µ–Ω—å", value="cite", emoji="üìñ"),
    nextcord.SelectOption(label=f"–°–ª—É—á–∞–π–Ω–æ–µ —Ñ–æ—Ç–æ –¥–æ–º–∞—à–Ω–µ–≥–æ –ª—é–±–∏–º—Ü–∞", value="animal", emoji="ü¶ä"),
    nextcord.SelectOption(label=f"–°–ª—É—á–∞–π–Ω—ã–π –º–µ–º", value="meme", emoji="üé≠"),
    nextcord.SelectOption(label=f"–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ '–ñ–∞–±–∏–π –∫–≤–∞–∫'", value="food", emoji="ü•ê"),
    nextcord.SelectOption(label=f"–°–ª—É—á–∞–π–Ω—ã–π —Å–∞—É–Ω–¥–ø–∞–¥ –õ–µ—Ö–∏", value="soundpad", emoji="üîä"),
    nextcord.SelectOption(label=f"–ê–≤—Ç–æ—Ä—Å–∫–∏–π —Ä–∏—Å—É–Ω–æ–∫", value="drawing", emoji="üèû"),
    nextcord.SelectOption(label=f"–î–æ–∂–¥—å –∏–∑ –ª—è–≥—É—à–µ–∫", value="rain", emoji="üåß"),
    nextcord.SelectOption(label=f"–ò–≤–µ–Ω—Ç", value="event", emoji="üöÄ"),
    nextcord.SelectOption(label=f"–†–æ–ª—å '–õ–µ–≥—É—à—å–∫–∞' –Ω–∞ 1 –º–µ—Å—è—Ü", value="role", emoji="üéñ"),
    nextcord.SelectOption(label=f"–°–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –±–∞–Ω–¥—É", value="band", emoji="ü•∑"),
]

class ShopMenuView(nextcord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @nextcord.ui.select(
        placeholder="–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ç–æ–≤–∞—Ä",
        options=options
    )
    async def select_purchase_callback(self, select, interaction: nextcord.Interaction):
        item = items()[select.values[0]]['description']
        price = items()[select.values[0]]['price']

        await interaction.response.defer()
        await interaction.edit_original_message(
            embed=messages.buying_confirmation(item, price).embed,
            file=messages.buying_confirmation(item, price).file,
            view=PurchaseView(price, select.values[0])
        )

    @nextcord.ui.button(label="–ó–∞–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", style=nextcord.ButtonStyle.gray, emoji="‚ùå")
    async def close_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        await interaction.delete_original_message()

class PurchaseView(nextcord.ui.View):
    def __init__(self, price, shop_item):
        super().__init__(timeout=None)
        self.price = price
        self.shop_item = shop_item

    @nextcord.ui.button(label="–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Ç–æ–≤–∞—Ä", style=nextcord.ButtonStyle.green, emoji="üíµ")
    async def purchase_confirm_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        user_balance = sql.get_user_balance(interaction.user.id)
        await interaction.response.defer()
        if self.price > user_balance:
            await interaction.edit_original_message(
                embed=messages.insufficient_balance().embed,
                file=messages.insufficient_balance().file,
                view=None
            )
        else:
            sql.set_user_balance(interaction.user.id, -self.price)
            sql.set_bank_balance(self.price)
            bought_item_message = messages.item_purchased(self.shop_item)

            if self.shop_item in ["drawing", "rain", "event", "role", "band"]:
                request_to_admin = bot.client.get_user(config.ADMIN_ID)
                await request_to_admin.send(
                    embed=messages.service_request(interaction.user.mention, self.shop_item).embed,
                    file=messages.service_request(interaction.user.mention, self.shop_item).file,
                )
            if self.shop_item == "role":
                premium_role = interaction.guild.get_role(config.PREMIUM_ROLE_ID)
                await interaction.user.add_roles(premium_role)

            await interaction.edit_original_message(
                content=bought_item_message.content,
                embed=bought_item_message.embed,
                file=bought_item_message.file,
                view=None
            )

    @nextcord.ui.button(label="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–∏–ª–∞–≤–∫—É", style=nextcord.ButtonStyle.gray, emoji="‚óÄÔ∏è")
    async def return_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        await interaction.edit_original_message(
            embed=messages.shop().embed,
            file=messages.shop().file,
            view=ShopMenuView()
        )

class TransferView(nextcord.ui.View):
    def __init__(self, transfer_amount, other_user):
        super().__init__(timeout=None)
        self.transfer_amount = transfer_amount
        self.other_user = other_user

    @nextcord.ui.button(label="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥", style=nextcord.ButtonStyle.green, emoji="‚úÖ")
    async def transfer_confirm_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        user_balance = sql.get_user_balance(interaction.user.id)
        await interaction.response.defer()
        if self.transfer_amount > user_balance:
            return await interaction.edit_original_message(
                embed=messages.transfer_denied(self.other_user, self.transfer_amount).embed,
                file=messages.transfer_denied(self.other_user, self.transfer_amount).file,
                view=None
            )

        other_user_balance = sql.get_user_balance(self.other_user.id)
        if other_user_balance is None:
            sql.create_user_balance(self.other_user.id, self.other_user.name)
        sql.set_user_balance(interaction.user.id, -self.transfer_amount)
        sql.set_user_balance(self.other_user.id, self.transfer_amount)

        await interaction.edit_original_message(
            embed=messages.transfer_successful(self.other_user, self.transfer_amount).embed,
            file=messages.transfer_successful(self.other_user, self.transfer_amount).file,
            view=None
        )

    @nextcord.ui.button(label="–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞", style=nextcord.ButtonStyle.gray, emoji="‚ùå")
    async def close_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        await interaction.delete_original_message(
        )


class AdminMenuView(nextcord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    async def interaction_check(self, interaction: nextcord.Interaction):
        if interaction.user.guild_permissions.administrator:
            return True
        else:
            await interaction.response.send_message(
                embed=messages.admin_option_only_warning().embed,
                file=messages.admin_option_only_warning().file,
                ephemeral=True)
            return False

    @nextcord.ui.select(
        placeholder="–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é",
        options=[
            nextcord.SelectOption(
                label=f"–ö—ç—à–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã",
                value="cache",
                description="–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞",
                emoji="‚öôÔ∏è"),
            nextcord.SelectOption(
                label=f"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—á—ë—Ç –±–∞–Ω–∫–∞",
                value="bank_balance",
                description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å, —Å–∫–æ–ª—å–∫–æ –ª—è–≥—É—à–µ–∫ –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏",
                emoji="ü™ô"),
            nextcord.SelectOption(
                label=f"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—á—ë—Ç–∞ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
                value="all_users_balance",
                description="–ò–∑—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞—Ä–º–∞–Ω–æ–≤ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
                emoji="üìà"),
            nextcord.SelectOption(
                label=f"–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–∫–æ–ª—å–∫–æ —É–≥–æ–¥–Ω–æ –ª—è–≥—É—à–µ–∫ —É—á–∞—Å—Ç–Ω–∏–∫—É",
                value="gift",
                description="–û–¥–∞—Ä–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –±–æ–ª–æ—Ç–Ω—ã–º —Å–æ–∫—Ä–æ–≤–∏—â–µ–º",
                emoji="üíé"),
            nextcord.SelectOption(
                label=f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—ã",
                value="prices",
                description="–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ",
                emoji="üßÆ"),
            nextcord.SelectOption(
                label=f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –æ—Ç–ª–æ–≤–∞",
                value="probabilities",
                description="–ü–æ–±—ã—Ç—å –≤–ª–∞—Å—Ç–µ–ª–∏–Ω–æ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π",
                emoji="üïπ"),
            nextcord.SelectOption(
                label=f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫—É–ª–¥–∞—É–Ω",
                value="cooldown",
                description="–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–æ–ø—É—Å—Ç–∏–º—É—é —á–∞—Å—Ç–æ—Ç—É –æ—Ç–ª–æ–≤–∞",
                emoji="‚è∞"),
            nextcord.SelectOption(
                label=f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞ –≤ —Å–∞–ª—É–Ω",
                value="post_news",
                description="–ì–æ–≤–æ—Ä–∏—Ç—å –æ—Ç –∏–º–µ–Ω–∏ –ª—è–≥—É—à–∞—á—å–µ–≥–æ –ø—Ä–µ–¥–≤–æ–¥–∏—Ç–µ–ª—è",
                emoji="üí≠"),
        ]
    )
    async def select_admin_menu_callback(self, select, interaction: nextcord.Interaction):
        admin_actions = {
            "bank_balance": {"message": messages.bank_balance(), "view": AdminActionBasicView()},
            "all_users_balance": {"message": messages.all_users_balances(), "view": AdminActionBasicView()},
            "gift": {"message": messages.gift(), "view": GiftView()},
            "prices": {"message": messages.set_price(), "view": SetPriceView()},
            "probabilities": {"message": messages.set_probabilities(), "view": SetProbabilitiesView()},
            "cooldown": {"message": messages.set_cooldown(), "view": SetCooldownView()},
            "post_news": {"message": messages.post_news(), "view": MessageByBotView()},
        }
        await interaction.response.defer()

        if select.values[0] == "cache":
            files_count_printable = utils.refresh_cache()
            await interaction.edit_original_message(
                embed=messages.caching_successful(files_count_printable).embed,
                file=messages.caching_successful(files_count_printable).file,
                view=AdminActionBasicView()
            )
        else:
            await interaction.edit_original_message(
                embed=admin_actions[select.values[0]]["message"].embed,
                file=admin_actions[select.values[0]]["message"].file,
                view=admin_actions[select.values[0]]["view"]
            )

    @nextcord.ui.button(label="–ó–∞–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω–∫—É", style=nextcord.ButtonStyle.gray, emoji="‚ùå")
    async def close_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        await interaction.delete_original_message()


class AdminActionBasicView(nextcord.ui.View):
    def __init__(self, *args, **kwargs):
        super().__init__(timeout=None, *args, **kwargs)

    async def interaction_check(self, interaction: nextcord.Interaction):
        if interaction.user.guild_permissions.administrator:
            return True
        else:
            await interaction.response.send_message(
                embed=messages.admin_option_only_warning().embed,
                file=messages.admin_option_only_warning().file,
                ephemeral=True)
            return False

    @nextcord.ui.button(label="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω–∫—É", style=nextcord.ButtonStyle.gray, emoji="‚óÄÔ∏è", row=2)
    async def return_to_admin_menu_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        await interaction.edit_original_message(
            embed=messages.admin().embed,
            file=messages.admin().file,
            view=AdminMenuView()
        )

    @nextcord.ui.button(label="–ó–∞–∫—Ä—ã—Ç—å", style=nextcord.ButtonStyle.gray, emoji="‚ùå", row=2)
    async def close_notify_message_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        await interaction.delete_original_message()


class MessageWindow(nextcord.ui.Modal):
    def __init__(self):
        super().__init__("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª")

        self.message_title = nextcord.ui.TextInput(
            label="–ó–∞–≥–æ–ª–æ–≤–æ–∫",
            max_length=100,
            required=True,
            placeholder="–¢–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞",
            style=nextcord.TextInputStyle.short
        )
        self.add_item(self.message_title)
        self.message_description = nextcord.ui.TextInput(
            label="–°–æ–æ–±—â–µ–Ω–∏–µ",
            required=True,
            placeholder="–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è",
            style=nextcord.TextInputStyle.paragraph
        )
        self.add_item(self.message_description)

    async def callback(self, interaction: nextcord.Interaction) -> None:
        await interaction.response.defer()
        channel = interaction.guild.get_channel(config.NEWS_CHANNEL_ID)
        await channel.send(
            embed=messages.news_channel_message(self.message_title.value, self.message_description.value).embed,
            file=messages.news_channel_message(self.message_title.value, self.message_description.value).file)
        await interaction.followup.send(
            embed=messages.post_news_result().embed,
            file=messages.post_news_result().file,
            ephemeral=True)

class MessageByBotView(AdminActionBasicView):
    def __init__(self):
        super().__init__()

    @nextcord.ui.button(label="–°–æ–∑–¥–∞—Ç—å –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å", style=nextcord.ButtonStyle.green, emoji="üóû")
    async def send_message_by_bot_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.send_modal(MessageWindow())

class SetPriceModal(nextcord.ui.Modal):
    def __init__(self, item):
        self.item = item
        super().__init__(f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—É—é —Ü–µ–Ω—É –Ω–∞ {items()[self.item]['description']}")

        self.price = nextcord.ui.TextInput(
            label="–ù–æ–≤–∞—è —Ü–µ–Ω–∞",
            max_length=4,
            required=True,
            placeholder=f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {items()[self.item]['price']} –ª—è–≥—É—à–µ–∫",
            style=nextcord.TextInputStyle.short
        )
        self.add_item(self.price)

    async def callback(self, interaction: nextcord.Interaction) -> None:
        await interaction.response.defer()
        is_valid_price = utils.validate_price(self.price.value)
        if is_valid_price:
            utils.set_price(self.item, self.price.value)
        await interaction.followup.send(
            embed=messages.set_price_result(is_valid_price).embed,
            file=messages.set_price_result(is_valid_price).file,
            ephemeral=True)

class SetPriceView(AdminActionBasicView):
    def __init__(self):
        super().__init__()

    @nextcord.ui.select(
        placeholder="–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ç–æ–≤–∞—Ä",
        options=options
    )
    async def set_price_callback(self, select, interaction: nextcord.Interaction):
        await interaction.response.send_modal(SetPriceModal(select.values[0]))

    @nextcord.ui.button(label="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", style=nextcord.ButtonStyle.green, emoji="üí≤")
    async def default_prices_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        utils.set_price(reset=True)
        await interaction.followup.send(
            embed=messages.reset_prices_result().embed,
            file=messages.reset_prices_result().file,
            ephemeral=True
        )

class SetProbabilitiesModal(nextcord.ui.Modal):
    def __init__(self):
        super().__init__("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –ø–æ–∏–º–∫–∏")

        self.common = nextcord.ui.TextInput(
            label="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —É–ª–æ–≤",
            max_length=4,
            required=True,
            placeholder=f"–¢–µ–∫—É—â–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {probabilities()['common']} –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤",
            style=nextcord.TextInputStyle.short
        )
        self.add_item(self.common)
        self.uncommon = nextcord.ui.TextInput(
            label="–†–µ–¥–∫–∏–π —É–ª–æ–≤",
            max_length=4,
            required=True,
            placeholder=f"–¢–µ–∫—É—â–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {probabilities()['uncommon']} –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤",
            style=nextcord.TextInputStyle.short
        )
        self.add_item(self.uncommon)
        self.epic = nextcord.ui.TextInput(
            label="–≠–ø–∏—á–Ω—ã–π —É–ª–æ–≤",
            max_length=4,
            required=True,
            placeholder=f"–¢–µ–∫—É—â–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {probabilities()['epic']} –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤",
            style=nextcord.TextInputStyle.short
        )
        self.add_item(self.epic)
        self.legendary = nextcord.ui.TextInput(
            label="–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π —É–ª–æ–≤",
            max_length=4,
            required=True,
            placeholder=f"–¢–µ–∫—É—â–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {probabilities()['legendary']} –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤",
            style=nextcord.TextInputStyle.short
        )
        self.add_item(self.legendary)

    async def callback(self, interaction: nextcord.Interaction) -> None:
        await interaction.response.defer()
        updated_probabilities = {
            "common": self.common.value,
            "uncommon": self.uncommon.value,
            "epic": self.epic.value,
            "legendary": self.legendary.value
        }
        is_valid_probabilities = utils.validate_probabilities(updated_probabilities)
        if is_valid_probabilities:
            utils.set_probabilities(updated_probabilities)
        await interaction.followup.send(
            embed=messages.set_probabilities_result(is_valid_probabilities).embed,
            file=messages.set_probabilities_result(is_valid_probabilities).file,
            ephemeral=True)


class SetProbabilitiesView(AdminActionBasicView):
    def __init__(self):
        super().__init__()

    @nextcord.ui.button(label="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏", style=nextcord.ButtonStyle.green, emoji="üé≤")
    async def set_probabilities_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.send_modal(SetProbabilitiesModal())

    @nextcord.ui.button(label="–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é", style=nextcord.ButtonStyle.green, emoji="üíØ")
    async def default_probabilities_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        utils.set_probabilities(reset=True)
        await interaction.followup.send(
            embed=messages.reset_probabilities_result().embed,
            file=messages.reset_probabilities_result().file,
            ephemeral=True
        )

class SetCooldownModal(nextcord.ui.Modal):
    def __init__(self):
        super().__init__("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É –ª–æ–≤–ª–µ–π")

        self.cooldown = nextcord.ui.TextInput(
            label="–ö—É–ª–¥–∞—É–Ω",
            max_length=2,
            required=True,
            placeholder=f"–¢–µ–∫—É—â–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {config.CATCHING_COOLDOWN} —Å–µ–∫—É–Ω–¥",
            style=nextcord.TextInputStyle.short
        )
        self.add_item(self.cooldown)

    async def callback(self, interaction: nextcord.Interaction) -> None:
        await interaction.response.defer()
        is_valid_cooldown = utils.validate_cooldown(self.cooldown.value)
        if is_valid_cooldown:
            utils.set_cooldown(self.cooldown.value)
        await interaction.followup.send(
            embed=messages.set_cooldown_result(is_valid_cooldown).embed,
            file=messages.set_cooldown_result(is_valid_cooldown).file,
            ephemeral=True)

class SetCooldownView(AdminActionBasicView):
    def __init__(self):
        super().__init__()

    @nextcord.ui.button(label="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫—É–ª–¥–∞—É–Ω", style=nextcord.ButtonStyle.green, emoji="‚è≥")
    async def set_cooldown_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.send_modal(SetCooldownModal())

    @nextcord.ui.button(label="–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é", style=nextcord.ButtonStyle.gray, emoji="‚è±")
    async def default_cooldown_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        utils.set_cooldown(reset=True)
        await interaction.followup.send(
            embed=messages.reset_cooldown_result().embed,
            file=messages.reset_cooldown_result().file,
            ephemeral=True
        )

class GiftModal(nextcord.ui.Modal):
    def __init__(self):
        super().__init__("–ü–æ–¥–∞—Ä–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫—É –ª—è–≥—É—à–∞—á—å–µ —Å–æ–∫—Ä–æ–≤–∏—â–µ")

        self.username = nextcord.ui.TextInput(
            label="discord username",
            required=True,
            style=nextcord.TextInputStyle.short
        )
        self.add_item(self.username)
        self.gift_amount = nextcord.ui.TextInput(
            label="–†–∞–∑–º–µ—Ä —Å–æ–∫—Ä–æ–≤–∏—â–∞",
            max_length=4,
            required=True,
            style=nextcord.TextInputStyle.short
        )
        self.add_item(self.gift_amount)

    async def callback(self, interaction: nextcord.Interaction) -> None:
        await interaction.response.defer()
        is_valid_gift = self.gift_amount.value.isdigit()
        if is_valid_gift:
            sql.set_user_balance_by_username(self.username.value, int(self.gift_amount.value))
        await interaction.followup.send(
            embed=messages.gift_confirmation(self.username.value, int(self.gift_amount.value), is_valid_gift).embed,
            file=messages.gift_confirmation(self.username.value, int(self.gift_amount.value), is_valid_gift).file,
            ephemeral=True)

class GiftView(AdminActionBasicView):
    def __init__(self):
        super().__init__()

    @nextcord.ui.button(label="–°–¥–µ–ª–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫ —Å –±–∞—Ä—Å–∫–æ–≥–æ –ø–ª–µ—á–∞", style=nextcord.ButtonStyle.green, emoji="üí∞")
    async def gift_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.send_modal(GiftModal())
