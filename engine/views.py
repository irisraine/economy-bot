import nextcord
import engine.sql as sql
import engine.messages as messages
import engine.utils as utils
import engine.config as config


class PurchaseButton(nextcord.ui.View):
    def __init__(self, price, shop_item):
        super().__init__(timeout=None)
        self.price = price
        self.shop_item = shop_item

    @nextcord.ui.button(label="–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Ç–æ–≤–∞—Ä", style=nextcord.ButtonStyle.green, emoji="üíµ")
    async def purchase_confirm_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        user_balance = sql.get_user_balance(interaction.user.id)
        await interaction.response.defer()
        if self.price > user_balance:
            await interaction.edit_original_message(
                embed=messages.insufficient_balance().embed,
                file=messages.insufficient_balance().file,
                view=None
            )
        else:
            sql.set_user_balance(interaction.user.id, -self.price)
            bought_item_message = messages.item_purchased(self.shop_item)

            await interaction.edit_original_message(
                content=bought_item_message.content,
                embed=bought_item_message.embed,
                file=bought_item_message.file,
                view=None
            )

    @nextcord.ui.button(label="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–∏–ª–∞–≤–∫—É", style=nextcord.ButtonStyle.gray, emoji="‚óÄÔ∏è")
    async def return_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        await interaction.edit_original_message(
            embed=messages.shop().embed,
            file=messages.shop().file,
            view=ShopList()
        )

class TransferButton(nextcord.ui.View):
    def __init__(self, transfer_amount, other_user):
        super().__init__(timeout=None)
        self.transfer_amount = transfer_amount
        self.other_user = other_user

    @nextcord.ui.button(label="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥", style=nextcord.ButtonStyle.green, emoji="‚úÖ")
    async def transfer_confirm_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        user_balance = sql.get_user_balance(interaction.user.id)
        await interaction.response.defer()
        if self.transfer_amount > user_balance:
            return await interaction.edit_original_message(
                embed=messages.transfer_denied(self.other_user, self.transfer_amount).embed,
                file=messages.transfer_denied(self.other_user, self.transfer_amount).file,
                view=None
            )

        other_user_balance = sql.get_user_balance(self.other_user.id)
        if other_user_balance is None:
            sql.create_user_balance(self.other_user.id)
        sql.set_user_balance(interaction.user.id, -self.transfer_amount)
        sql.set_user_balance(self.other_user.id, self.transfer_amount)

        await interaction.edit_original_message(
            embed=messages.transfer_successful(self.other_user, self.transfer_amount).embed,
            file=messages.transfer_successful(self.other_user, self.transfer_amount).file,
            view=None
        )

    @nextcord.ui.button(label="–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞", style=nextcord.ButtonStyle.gray, emoji="‚ùå")
    async def close_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        await interaction.delete_original_message(
        )


class ShopList(nextcord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @nextcord.ui.select(
        placeholder="–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ç–æ–≤–∞—Ä",
        options=[
            nextcord.SelectOption(label=f"–ü–æ—Å–ª—É—à–∞—Ç—å —ç–ø–∏—á–Ω—ã–π —Ç—Ä–µ–∫ –ø—Ä–æ –õ–µ—Ö—É", value="track", description=f"–°—Ç–æ–∏–º–æ—Å—Ç—å - {config.PRICES['track']} –ª—è–≥—É—à–∫–∞", emoji="üé∏"),
            nextcord.SelectOption(label=f"–õ—è–≥—É—à–∫–∞", value="frog", description=f"–°—Ç–æ–∏–º–æ—Å—Ç—å - {config.PRICES['frog']} –ª—è–≥—É—à–∫–∏", emoji="üê∏"),
            nextcord.SelectOption(label=f"–°–ª—É—á–∞–π–Ω–∞—è –º—É–¥—Ä–∞—è –º—ã—Å–ª—å –Ω–∞ –¥–µ–Ω—å", value="cite", description=f"–°—Ç–æ–∏–º–æ—Å—Ç—å - {config.PRICES['cite']} –ª—è–≥—É—à–µ–∫", emoji="üìñ"),
            nextcord.SelectOption(label=f"–°–ª—É—á–∞–π–Ω–æ–µ —Ñ–æ—Ç–æ –¥–æ–º–∞—à–Ω–µ–≥–æ –ª—é–±–∏–º—Ü–∞", value="animal", description=f"–°—Ç–æ–∏–º–æ—Å—Ç—å - {config.PRICES['animal']} –ª—è–≥—É—à–µ–∫", emoji="ü¶ä"),
            nextcord.SelectOption(label=f"–°–ª—É—á–∞–π–Ω—ã–π –º–µ–º", value="meme", description=f"–°—Ç–æ–∏–º–æ—Å—Ç—å - {config.PRICES['animal']} –ª—è–≥—É—à–µ–∫", emoji="üé≠"),
            nextcord.SelectOption(label=f"–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ '–ñ–∞–±–∏–π –∫–≤–∞–∫'", value="food", description=f"–°—Ç–æ–∏–º–æ—Å—Ç—å - {config.PRICES['food']} –ª—è–≥—É—à–µ–∫", emoji="ü•ê"),
            nextcord.SelectOption(label=f"–°–ª—É—á–∞–π–Ω—ã–π —Å–∞—É–Ω–¥–ø–∞–¥ –õ–µ—Ö–∏", value="soundpad", description=f"–°—Ç–æ–∏–º–æ—Å—Ç—å - {config.PRICES['soundpad']} –ª—è–≥—É—à–µ–∫", emoji="üîä"),
            nextcord.SelectOption(label=f"–ê–≤—Ç–æ—Ä—Å–∫–∏–π —Ä–∏—Å—É–Ω–æ–∫", value="drawing", description=f"–°—Ç–æ–∏–º–æ—Å—Ç—å - {config.PRICES['drawing']} –ª—è–≥—É—à–µ–∫", emoji="üèû"),
            nextcord.SelectOption(label=f"–î–æ–∂–¥—å –∏–∑ –ª—è–≥—É—à–µ–∫", value="rain", description=f"–°—Ç–æ–∏–º–æ—Å—Ç—å - {config.PRICES['rain']} –ª—è–≥—É—à–µ–∫", emoji="üåß"),
            nextcord.SelectOption(label=f"–ò–≤–µ–Ω—Ç", value="event", description=f"–°—Ç–æ–∏–º–æ—Å—Ç—å - {config.PRICES['event']} –ª—è–≥—É—à–µ–∫", emoji="üöÄ"),
            nextcord.SelectOption(label=f"–†–æ–ª—å '–õ–µ–≥—É—à—å–∫–∞' –Ω–∞ 1 –º–µ—Å—è—Ü", value="role",description=f"–°—Ç–æ–∏–º–æ—Å—Ç—å - {config.PRICES['role']} –ª—è–≥—É—à–µ–∫", emoji="üéñ"),
            nextcord.SelectOption(label=f"–°–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –±–∞–Ω–¥—É", value="band", description=f"–°—Ç–æ–∏–º–æ—Å—Ç—å - {config.PRICES['band']} –ª—è–≥—É—à–µ–∫",emoji="ü•∑"),
        ]
    )
    async def select_purchase_callback(self, select, interaction: nextcord.Interaction):
        items = {
            "track": {"price": config.PRICES['track'], "description": "–¢—Ä–µ–∫ –ø—Ä–æ –ª–µ—Ö—É"},
            "frog": {"price": config.PRICES['frog'], "description": "–§–æ—Ç–æ –ª—è–≥—É—à–∫–∏"},
            "cite": {"price": config.PRICES['cite'], "description": "–¶–∏—Ç–∞—Ç–∞ –¥–Ω—è"},
            "animal": {"price": config.PRICES['animal'], "description": "–ñ–∏–≤–æ—Ç–Ω–æ–µ"},
            "meme": {"price": config.PRICES['meme'], "description": "–ú–µ–º"},
            "food": {"price": config.PRICES['food'], "description": "–ï–¥–∞"},
            "soundpad": {"price": config.PRICES['soundpad'], "description": "–°–∞—É–Ω–¥–ø–∞–¥"},
            "drawing": {"price": config.PRICES['drawing'], "description": "–†–∏—Å—É–Ω–æ–∫"},
            "rain": {"price": config.PRICES['rain'], "description": "–î–æ–∂–¥—å –∏–∑ –ª—è–≥—É—à–µ–∫"},
            "event": {"price": config.PRICES['event'], "description": "–ò–≤–µ–Ω—Ç"},
            "role": {"price": config.PRICES['role'], "description": "–†–æ–ª—å"},
            "band": {"price": config.PRICES['band'], "description": "–ë–∞–Ω–¥–∞"},
        }
        item = items[select.values[0]]['description']
        price = items[select.values[0]]['price']

        await interaction.response.defer()
        await interaction.edit_original_message(
            embed=messages.buying_confirmation(item, price).embed,
            file=messages.buying_confirmation(item, price).file,
            view=PurchaseButton(price, select.values[0])
        )

    @nextcord.ui.button(label="–ó–∞–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", style=nextcord.ButtonStyle.gray, emoji="‚ùå")
    async def close_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        await interaction.delete_original_message()

class AdminPanel(nextcord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @nextcord.ui.select(
        placeholder="–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é",
        options=[
            nextcord.SelectOption(label=f"–ö—ç—à–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã", value="cache", description="–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞, –ª–∏–±–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞", emoji="‚öôÔ∏è"),
            nextcord.SelectOption(label=f"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—á—ë—Ç –±–∞–Ω–∫–∞", value="bank_balance", description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å, —Å–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –ª—è–≥—É—à–µ–∫ –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏", emoji="ü™ô"),
            nextcord.SelectOption(label=f"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—á—ë—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞", value="show_user_balance", description="–ó–∞–≥–ª—è–Ω—É—Ç—å –≤ –∫–æ—à–µ–ª–µ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏ –ø–æ—Å—á–∏—Ç–∞—Ç—å —á—É–∂–∏–µ –¥–µ–Ω—å–≥–∏", emoji="üí∞"),
            nextcord.SelectOption(label=f"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—á—ë—Ç–∞ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", value="show_all_users_balance", description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å –≤—Å–µ—Ö, —É –∫–æ–≥–æ –µ—Å—Ç—å —Ö–æ—Ç—å –æ–¥–Ω–∞ –ª—è–≥—É—à–∫–∞", emoji="üìà"),
            nextcord.SelectOption(label=f"–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–∫–æ–ª—å–∫–æ —É–≥–æ–¥–Ω–æ –ª—è–≥—É—à–µ–∫ —É—á–∞—Å—Ç–Ω–∏–∫—É", value="unlimited_transfer", description="–û–¥–∞—Ä–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–æ–∫—Ä–æ–≤–∏—â–µ–º", emoji="üíé"),
            nextcord.SelectOption(label=f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—ã", value="prices", description="–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è", emoji="üßÆ"),
            nextcord.SelectOption(label=f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –æ—Ç–ª–æ–≤–∞", value="probabilities", description="–ü–æ–±—ã—Ç—å –≤–ª–∞—Å—Ç–µ–ª–∏–Ω–æ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π", emoji="üïπ"),
            nextcord.SelectOption(label=f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞ –≤ —Å–∞–ª—É–Ω", value="say", description="–ì–æ–≤–æ—Ä–∏—Ç—å –æ—Ç –∏–º–µ–Ω–∏ –ª—è–≥—É—à–∞—á—å–µ–≥–æ –ø—Ä–µ–¥–≤–æ–¥–∏—Ç–µ–ª—è", emoji="üí≠"),
        ]
    )
    async def select_admin_panel_callback(self, select, interaction: nextcord.Interaction):
        await interaction.response.defer()

        if select.values[0] == "cache":
            files_count_printable = utils.refresh_cache()
            await interaction.edit_original_message(
                embed=messages.caching_successful(files_count_printable).embed,
                file=messages.caching_successful(files_count_printable).file,
                view=AdminPanelAfterActionButtons()
            )
        else:
            await interaction.edit_original_message(
                embed=messages.not_applied_yet().embed,
                file=messages.not_applied_yet().file,
                view=AdminPanelAfterActionButtons()
            )

    @nextcord.ui.button(label="–ó–∞–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω–∫—É", style=nextcord.ButtonStyle.gray, emoji="‚ùå")
    async def close_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        await interaction.delete_original_message()

class AdminPanelAfterActionButtons(nextcord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @nextcord.ui.button(label="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω–∫—É", style=nextcord.ButtonStyle.gray, emoji="‚óÄÔ∏è")
    async def return_to_admin_panel_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        await interaction.edit_original_message(
            embed=messages.admin_panel().embed,
            file=messages.admin_panel().file,
            view=AdminPanel()
        )

    @nextcord.ui.button(label="–ó–∞–∫—Ä—ã—Ç—å", style=nextcord.ButtonStyle.gray, emoji="‚ùå")
    async def close_notify_message_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        await interaction.delete_original_message()
