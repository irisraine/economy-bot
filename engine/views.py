import nextcord
import logging
import asyncio
import engine.bot as bot
import engine.sql as sql
import engine.messages as messages
import engine.utils as utils
import engine.config as config


def items():
    return {
        "track": {"price": config.PRICES['track'], "description": "–¢—Ä–µ–∫ –ø—Ä–æ –õ–µ—Ö—É"},
        "frog": {"price": config.PRICES['frog'], "description": "–õ—è–≥—É—à–∫—É"},
        "cite": {"price": config.PRICES['cite'], "description": "–ú—É–¥—Ä—É—é –º—ã—Å–ª—å"},
        "animal": {"price": config.PRICES['animal'], "description": "–ü–∏—Ç–æ–º—Ü–∞"},
        "meme": {"price": config.PRICES['meme'], "description": "–ú–µ–º"},
        "food": {"price": config.PRICES['food'], "description": "–ü–∏—â—É –∞—Ä–∏—Å—Ç–æ–∫—Ä–∞—Ç–æ–≤"},
        "soundpad": {"price": config.PRICES['soundpad'], "description": "–°–∞—É–Ω–¥–ø–∞–¥"},
        "drawing": {"price": config.PRICES['drawing'], "description": "–°–∫–µ—Ç—á"},
        "rain": {"price": config.PRICES['rain'], "description": "–î–æ–∂–¥—å –∏–∑ –ª—è–≥—É—à–µ–∫"},
        "role_lite": {"price": config.PRICES['role_lite'], "description": "–†–æ–ª—å –ª—è–≥—É—à–æ–Ω–∫–∞"},
        "role": {"price": config.PRICES['role'], "description": "–†–æ–ª—å –ª—è–≥—É—à–∫–∏"},
        "band": {"price": config.PRICES['band'], "description": "–ë–∞–Ω–¥—É"},
    }


def probabilities():
    return {
        "common": int(config.PROBABILITIES['common'] * 100),
        "uncommon": int(config.PROBABILITIES['uncommon'] * 100),
        "epic": int(config.PROBABILITIES['epic'] * 100),
        "legendary": int(config.PROBABILITIES['legendary'] * 100)
    }


options = [
    nextcord.SelectOption(label="–ü–æ—Å–ª—É—à–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ç—Ä–µ–∫ –ø—Ä–æ –õ–µ—Ö—É", value="track", emoji=f"{config.ITEMS_EMOJI['track']}"),
    nextcord.SelectOption(label="–°–ª—É—á–∞–π–Ω–∞—è –ª—è–≥—É—à–∫–∞", value="frog", emoji=f"{config.ITEMS_EMOJI['frog']}"),
    nextcord.SelectOption(label="–°–ª—É—á–∞–π–Ω–∞—è –º—É–¥—Ä–∞—è –º—ã—Å–ª—å –Ω–∞ –¥–µ–Ω—å", value="cite", emoji=f"{config.ITEMS_EMOJI['cite']}"),
    nextcord.SelectOption(label="–°–ª—É—á–∞–π–Ω–æ–µ —Ñ–æ—Ç–æ –¥–æ–º–∞—à–Ω–µ–≥–æ –ª—é–±–∏–º—Ü–∞", value="animal", emoji=f"{config.ITEMS_EMOJI['animal']}"),
    nextcord.SelectOption(label="–°–ª—É—á–∞–π–Ω—ã–π –º–µ–º", value="meme", emoji=f"{config.ITEMS_EMOJI['meme']}"),
    nextcord.SelectOption(label="–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ ¬´–ñ–∞–±–∏–π –∫–≤–∞–∫¬ª", value="food", emoji=f"{config.ITEMS_EMOJI['food']}"),
    nextcord.SelectOption(label="–°–ª—É—á–∞–π–Ω—ã–π —Å–∞—É–Ω–¥–ø–∞–¥ –õ–µ—Ö–∏", value="soundpad", emoji=f"{config.ITEMS_EMOJI['soundpad']}"),
    nextcord.SelectOption(label="–ê–≤—Ç–æ—Ä—Å–∫–∏–π —Å–∫–µ—Ç—á", value="drawing", emoji=f"{config.ITEMS_EMOJI['drawing']}"),
    nextcord.SelectOption(label="–î–æ–∂–¥—å –∏–∑ –ª—è–≥—É—à–µ–∫", value="rain", emoji=f"{config.ITEMS_EMOJI['rain']}"),
    nextcord.SelectOption(label="–†–æ–ª—å ¬´–õ—è–≥—É—à–æ–Ω–æ–∫¬ª –Ω–∞ 1 –º–µ—Å—è—Ü", value="role_lite", emoji=f"{config.ITEMS_EMOJI['role_lite']}"),
    nextcord.SelectOption(label="–†–æ–ª—å ¬´–õ–µ–≥—É—à—å–∫–∞¬ª –Ω–∞ 1 –º–µ—Å—è—Ü", value="role", emoji=f"{config.ITEMS_EMOJI['role']}"),
    nextcord.SelectOption(label="–°–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –±–∞–Ω–¥—É", value="band", emoji=f"{config.ITEMS_EMOJI['band']}"),
]


class ShopMenuView(nextcord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @nextcord.ui.select(
        placeholder="–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ç–æ–≤–∞—Ä",
        options=options
    )
    async def select_purchase_callback(self, select, interaction: nextcord.Interaction):
        item = items()[select.values[0]]['description']
        price = items()[select.values[0]]['price']

        await interaction.response.defer()
        await interaction.edit_original_message(
            **messages.purchasing_confirmation(item, price),
            view=PurchaseView(price, select.values[0])
        )

    @nextcord.ui.button(label="–ó–∞–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", style=nextcord.ButtonStyle.gray, emoji="‚ùå")
    async def close_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        await interaction.delete_original_message()


class PurchaseView(nextcord.ui.View):
    def __init__(self, price, shop_item):
        super().__init__(timeout=None)
        self.price = price
        self.shop_item = shop_item

    @nextcord.ui.button(label="–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Ç–æ–≤–∞—Ä", style=nextcord.ButtonStyle.green, emoji="üíµ")
    async def purchase_confirm_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        user_balance = sql.get_user_balance(interaction.user)
        await interaction.response.defer()
        if self.price > user_balance:
            return await interaction.edit_original_message(
                **messages.insufficient_balance(),
                view=None
            )
        if self.shop_item in ["role_lite", "role"]:
            premium_roles = [
                nextcord.utils.get(interaction.guild.roles, id=config.PREMIUM_ROLE['lite']),
                nextcord.utils.get(interaction.guild.roles, id=config.PREMIUM_ROLE['basic']),
                nextcord.utils.get(interaction.guild.roles, id=config.PREMIUM_ROLE['max'])
            ]
            assigned_premium_role = next((role for role in premium_roles if role in interaction.user.roles), None)
            if assigned_premium_role:
                return await interaction.edit_original_message(
                    **messages.already_has_premium_role(interaction.user, assigned_premium_role),
                    view=None
                )
        sql.set_user_balance(interaction.user, -self.price)
        sql.set_bank_balance(self.price)
        purchased_item_message = messages.item_purchased(self.shop_item)
        if self.shop_item in ["drawing", "rain", "role_lite", "role", "band"]:
            request_to_admin = bot.client.get_user(config.ADMIN_ID)
            await request_to_admin.send(**messages.service_request(interaction.user.mention, self.shop_item))
        if self.shop_item == "role_lite":
            premium_role_lite = interaction.guild.get_role(config.PREMIUM_ROLE['lite'])
            expiration_time = utils.get_timestamp() + config.PREMIUM_ROLE_DURATION
            sql.add_premium_role_user(interaction.user, expiration_time, role_tier="lite")
            await interaction.user.add_roles(premium_role_lite)
        if self.shop_item == "role":
            premium_role_basic = interaction.guild.get_role(config.PREMIUM_ROLE['basic'])
            expiration_time = utils.get_timestamp() + config.PREMIUM_ROLE_DURATION
            sql.add_premium_role_user(interaction.user, expiration_time)
            await interaction.user.add_roles(premium_role_basic)
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {interaction.user.name} –ø–æ–∫—É–ø–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{self.shop_item}'.")
        await interaction.edit_original_message(
            **purchased_item_message,
            view=None
        )

    @nextcord.ui.button(label="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–∏–ª–∞–≤–∫—É", style=nextcord.ButtonStyle.gray, emoji="‚óÄÔ∏è")
    async def return_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        await interaction.edit_original_message(
            **messages.shop(),
            view=ShopMenuView()
        )


class TransferView(nextcord.ui.View):
    def __init__(self, transfer_amount, other_user, original_user):
        super().__init__(timeout=None)
        self.transfer_amount = transfer_amount
        self.other_user = other_user
        self.original_user = original_user

    @nextcord.ui.button(label="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥", style=nextcord.ButtonStyle.green, emoji="‚úÖ")
    async def transfer_confirm_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        if interaction.user.id != self.original_user.id:
            return await interaction.edit_original_message(
                **messages.other_user_transfer_error(),
                view=None
            )
        user_balance = sql.get_user_balance(interaction.user)
        if self.transfer_amount > user_balance:
            return await interaction.edit_original_message(
                **messages.transfer_confirmation(self.other_user, self.transfer_amount, is_failed=True),
                view=None
            )
        sql.set_user_balance(interaction.user, -self.transfer_amount)
        sql.set_user_balance(self.other_user, self.transfer_amount)
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {interaction.user.name} –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {self.other_user.name} –ª—è–≥—É—à–µ–∫ "
                     f"–≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ {self.transfer_amount} —à—Ç.")
        await interaction.edit_original_message(
            **messages.transfer_confirmation(self.other_user, self.transfer_amount),
            view=None
        )

    @nextcord.ui.button(label="–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞", style=nextcord.ButtonStyle.gray, emoji="‚ùå")
    async def close_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        await interaction.delete_original_message()


class AdminMenuView(nextcord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    async def interaction_check(self, interaction: nextcord.Interaction):
        if interaction.user.guild_permissions.administrator:
            return True
        else:
            await interaction.response.send_message(**messages.admin_option_only_warning(), ephemeral=True)
            return False

    @nextcord.ui.select(
        placeholder="–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é",
        options=[
            nextcord.SelectOption(
                label="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—á—ë—Ç–∞ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
                value="all_users_balance",
                description="–ò–∑—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä—É–¥–æ–≤ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
                emoji="üìà"),
            nextcord.SelectOption(
                label="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—á—ë—Ç –±–∞–Ω–∫–∞",
                value="bank_balance",
                description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å, —Å–∫–æ–ª—å–∫–æ –ª—è–≥—É—à–µ–∫ –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏",
                emoji="ü™ô"),
            nextcord.SelectOption(
                label="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—á—ë—Ç –∫–∞–∑–∏–Ω–æ",
                value="casino_balance",
                description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å, —Å–∫–æ–ª—å–∫–æ –≤—ã–∏–≥—Ä–∞–ª–∏ –∏ –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏",
                emoji="üé∞"),
            nextcord.SelectOption(
                label="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω",
                value="quiz_statistics",
                description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —ç—Ä—É–¥–∏—Ç–æ–≤",
                emoji="üéì"),
            nextcord.SelectOption(
                label="–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–∫–æ–ª—å–∫–æ —É–≥–æ–¥–Ω–æ –ª—è–≥—É—à–µ–∫ —É—á–∞—Å—Ç–Ω–∏–∫—É",
                value="gift",
                description="–û–¥–∞—Ä–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –±–æ–ª–æ—Ç–Ω—ã–º —Å–æ–∫—Ä–æ–≤–∏—â–µ–º",
                emoji="üíé"),
            nextcord.SelectOption(
                label="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—ã",
                value="prices",
                description="–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ",
                emoji="üßÆ"),
            nextcord.SelectOption(
                label="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –æ—Ç–ª–æ–≤–∞",
                value="probabilities",
                description="–ü–æ–±—ã—Ç—å –≤–ª–∞—Å—Ç–µ–ª–∏–Ω–æ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π",
                emoji="üïπ"),
            nextcord.SelectOption(
                label="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫—É–ª–¥–∞—É–Ω",
                value="cooldown",
                description="–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–æ–ø—É—Å—Ç–∏–º—É—é —á–∞—Å—Ç–æ—Ç—É –æ—Ç–ª–æ–≤–∞",
                emoji="‚è∞"),
            nextcord.SelectOption(
                label="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ª–æ–≥",
                value="taxes_setup",
                description="–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–±–æ—Ä –Ω–∞–ª–æ–≥–∞ –∏ –∑–∞–¥–∞—Ç—å –µ–≥–æ —Ä–∞–∑–º–µ—Ä",
                emoji="üí∏"),
            nextcord.SelectOption(
                label="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ª–∏—Ü–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –Ω–æ–≤–æ—Å—Ç–µ–π",
                value="post_news",
                description="–ì–æ–≤–æ—Ä–∏—Ç—å –æ—Ç –∏–º–µ–Ω–∏ –ª—è–≥—É—à–∞—á—å–µ–≥–æ –ø—Ä–µ–¥–≤–æ–¥–∏—Ç–µ–ª—è",
                emoji="üí¨"),
            nextcord.SelectOption(
                label="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã –æ–±–ª–∞–¥–∞—Ç–µ–ª–µ–π —Ä–æ–ª–µ–π –ª—è–≥—É—à–æ–Ω–∫–∞ –∏ –ª—è–≥—É—à–∫–∏",
                value="role_manage",
                description="–ö–æ–º—É –∏ —Å–∫–æ–ª—å–∫–æ –µ—â–µ –æ—Å—Ç–∞–ª–æ—Å—å –∫–≤–∞–∫–∞—Ç—å",
                emoji="üëë"),
            nextcord.SelectOption(
                label="–ö—ç—à–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã",
                value="cache",
                description="–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞",
                emoji="‚öôÔ∏è"),
            nextcord.SelectOption(
                label="–û–±–Ω—É–ª–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö",
                value="reset_database",
                description="–£—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–ø–æ–∫–∞–ª–∏–ø—Å–∏—Å",
                emoji="üî™"),
        ]
    )
    async def select_admin_menu_callback(self, select, interaction: nextcord.Interaction):
        admin_actions = {
            "all_users_balance": {"message": messages.all_users_balances(), "view": None},
            "bank_balance": {"message": messages.bank_balance(), "view": None},
            "casino_balance": {"message": messages.casino_balance(), "view": None},
            "quiz_statistics": {"message": messages.quiz_statistics(), "view": None},
            "gift": {"message": messages.gift(), "view": GiftView()},
            "prices": {"message": messages.set_price(), "view": SetPriceView()},
            "probabilities": {"message": messages.set_probabilities(), "view": SetProbabilitiesView()},
            "cooldown": {"message": messages.set_cooldown(), "view": SetCooldownView()},
            "taxes_setup": {"message": messages.taxes_setup(), "view": TaxesSetupView()},
            "post_news": {"message": messages.post_news(), "view": PostNewsView()},
            "role_manage": {"message": messages.role_manage(), "view": RoleManageView()},
            "cache": {"message": messages.cache(), "view": CacheView()},
            "reset_database": {"message": messages.reset_database(), "view": ResetDatabaseView()},
        }
        await interaction.response.defer()
        await interaction.edit_original_message(
            **admin_actions[select.values[0]]["message"],
            view=admin_actions[select.values[0]]["view"]
        )

    @nextcord.ui.button(label="–ó–∞–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω–∫—É", style=nextcord.ButtonStyle.gray, emoji="‚ùå")
    async def close_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        await interaction.delete_original_message()


class AdminActionBasicView(nextcord.ui.View):
    def __init__(self, *args, **kwargs):
        super().__init__(timeout=None, *args, **kwargs)

    async def interaction_check(self, interaction: nextcord.Interaction):
        if interaction.user.guild_permissions.administrator:
            return True
        else:
            await interaction.response.send_message(**messages.admin_option_only_warning(), ephemeral=True)
            return False

    @nextcord.ui.button(label="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω–∫—É", style=nextcord.ButtonStyle.gray, emoji="‚óÄÔ∏è", row=2)
    async def return_to_admin_menu_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        await interaction.edit_original_message(
            **messages.admin(),
            view=AdminMenuView()
        )

    @nextcord.ui.button(label="–ó–∞–∫—Ä—ã—Ç—å", style=nextcord.ButtonStyle.gray, emoji="‚ùå", row=2)
    async def close_notify_message_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        await interaction.delete_original_message()


class SetPriceModal(nextcord.ui.Modal):
    def __init__(self, item):
        self.item = item
        super().__init__(f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—É—é —Ü–µ–Ω—É –Ω–∞ {items()[self.item]['description']}")

        self.price = nextcord.ui.TextInput(
            label="–ù–æ–≤–∞—è —Ü–µ–Ω–∞",
            max_length=4,
            required=True,
            placeholder=f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {items()[self.item]['price']} –ª—è–≥—É—à–µ–∫",
            style=nextcord.TextInputStyle.short
        )
        self.add_item(self.price)

    async def callback(self, interaction: nextcord.Interaction) -> None:
        await interaction.response.defer()
        is_valid = utils.validate(self.price.value, check_type='price')
        if is_valid:
            utils.set_price(self.item, self.price.value)
            logging.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–µ–Ω—É –Ω–∞ —Ç–æ–≤–∞—Ä –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{self.item}' "
                         f"—Ä–∞–≤–Ω–æ–π {self.price.value} –ª—è–≥—É—à–µ–∫.")
        await interaction.followup.send(**messages.set_price_confirmation(is_valid), ephemeral=True)


class SetPriceView(AdminActionBasicView):
    def __init__(self):
        super().__init__()

    @nextcord.ui.select(
        placeholder="–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ç–æ–≤–∞—Ä",
        options=options
    )
    async def set_price_callback(self, select, interaction: nextcord.Interaction):
        await interaction.response.send_modal(SetPriceModal(select.values[0]))

    @nextcord.ui.button(label="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", style=nextcord.ButtonStyle.green, emoji="üí≤")
    async def default_prices_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        utils.set_price(reset=True)
        logging.info("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ.")
        await interaction.followup.send(**messages.reset_prices_confirmation(), ephemeral=True)


class SetProbabilitiesModal(nextcord.ui.Modal):
    def __init__(self):
        super().__init__("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –ø–æ–∏–º–∫–∏")

        self.common = nextcord.ui.TextInput(
            label="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —É–ª–æ–≤",
            max_length=4,
            required=True,
            placeholder=f"–¢–µ–∫—É—â–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {probabilities()['common']} %",
            style=nextcord.TextInputStyle.short
        )
        self.add_item(self.common)
        self.uncommon = nextcord.ui.TextInput(
            label="–†–µ–¥–∫–∏–π —É–ª–æ–≤",
            max_length=4,
            required=True,
            placeholder=f"–¢–µ–∫—É—â–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {probabilities()['uncommon']} %",
            style=nextcord.TextInputStyle.short
        )
        self.add_item(self.uncommon)
        self.epic = nextcord.ui.TextInput(
            label="–≠–ø–∏—á–Ω—ã–π —É–ª–æ–≤",
            max_length=4,
            required=True,
            placeholder=f"–¢–µ–∫—É—â–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {probabilities()['epic']} %",
            style=nextcord.TextInputStyle.short
        )
        self.add_item(self.epic)
        self.legendary = nextcord.ui.TextInput(
            label="–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π —É–ª–æ–≤",
            max_length=4,
            required=True,
            placeholder=f"–¢–µ–∫—É—â–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {probabilities()['legendary']} %",
            style=nextcord.TextInputStyle.short
        )
        self.add_item(self.legendary)

    async def callback(self, interaction: nextcord.Interaction) -> None:
        await interaction.response.defer()
        updated_probabilities = {
            "common": self.common.value,
            "uncommon": self.uncommon.value,
            "epic": self.epic.value,
            "legendary": self.legendary.value
        }
        is_valid = utils.validate(updated_probabilities, check_type='probabilities')
        if is_valid:
            utils.set_probabilities(updated_probabilities)
            logging.info("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –æ—Ç–ª–æ–≤–∞ –ª—è–≥—É—à–µ–∫: "
                         f"—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π - {self.common.value}%, "
                         f"—Ä–µ–¥–∫–∏–π - {self.uncommon.value}%, "
                         f"—ç–ø–∏—á–Ω—ã–π - {self.epic.value}%, "
                         f"–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π - {self.legendary.value}%. ")
        await interaction.followup.send(**messages.set_probabilities_confirmation(is_valid), ephemeral=True)


class SetProbabilitiesView(AdminActionBasicView):
    def __init__(self):
        super().__init__()

    @nextcord.ui.button(label="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏", style=nextcord.ButtonStyle.green, emoji="üé≤")
    async def set_probabilities_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.send_modal(SetProbabilitiesModal())

    @nextcord.ui.button(label="–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é", style=nextcord.ButtonStyle.green, emoji="üíØ")
    async def default_probabilities_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        utils.set_probabilities(reset=True)
        logging.info("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –æ—Ç–ª–æ–≤–∞ –ª—è–≥—É—à–µ–∫.")
        await interaction.followup.send(**messages.reset_probabilities_confirmation(), ephemeral=True)


class SetCooldownModal(nextcord.ui.Modal):
    def __init__(self):
        super().__init__("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É –ª–æ–≤–ª–µ–π")

        self.cooldown = nextcord.ui.TextInput(
            label="–ö—É–ª–¥–∞—É–Ω",
            max_length=2,
            required=True,
            placeholder=f"–¢–µ–∫—É—â–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: "
                        f"{config.CATCHING_COOLDOWN} {utils.numeral(config.CATCHING_COOLDOWN, value_type='hours')}",
            style=nextcord.TextInputStyle.short
        )
        self.add_item(self.cooldown)

    async def callback(self, interaction: nextcord.Interaction) -> None:
        await interaction.response.defer()
        is_valid = utils.validate(self.cooldown.value, check_type='cooldown')
        if is_valid:
            utils.set_cooldown(self.cooldown.value)
            logging.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–µ–ª–∏—á–∏–Ω—É –∫—É–ª–¥–∞—É–Ω–∞ —Ä–∞–≤–Ω–æ–π {self.cooldown.value} —á.")
        await interaction.followup.send(**messages.set_cooldown_confirmation(is_valid), ephemeral=True)


class SetCooldownView(AdminActionBasicView):
    def __init__(self):
        super().__init__()

    @nextcord.ui.button(label="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫—É–ª–¥–∞—É–Ω", style=nextcord.ButtonStyle.green, emoji="‚è≥")
    async def set_cooldown_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.send_modal(SetCooldownModal())

    @nextcord.ui.button(label="–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é", style=nextcord.ButtonStyle.green, emoji="‚è±")
    async def default_cooldown_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        utils.set_cooldown(reset=True)
        logging.info("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –≤–µ–ª–∏—á–∏–Ω—É –∫—É–ª–¥–∞—É–Ω–∞.")
        await interaction.followup.send(**messages.reset_cooldown_confirmation(), ephemeral=True)


class GiftModal(nextcord.ui.Modal):
    def __init__(self):
        super().__init__("–ü–æ–¥–∞—Ä–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫—É –±–æ–ª–æ—Ç–Ω–æ–µ —Å–æ–∫—Ä–æ–≤–∏—â–µ")

        self.username = nextcord.ui.TextInput(
            label="Discord username",
            required=True,
            style=nextcord.TextInputStyle.short
        )
        self.add_item(self.username)
        self.gift_amount = nextcord.ui.TextInput(
            label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—è–≥—É—à–µ–∫",
            max_length=4,
            required=True,
            style=nextcord.TextInputStyle.short
        )
        self.add_item(self.gift_amount)

    async def callback(self, interaction: nextcord.Interaction) -> None:
        await interaction.response.defer()
        is_valid = utils.validate(self.gift_amount.value, check_type='gift')
        other_user = nextcord.utils.get(bot.client.get_all_members(), name=self.username.value)
        gift_confirmation_message = messages.gift_confirmation(other_user, self.gift_amount.value, is_valid)
        if other_user and is_valid:
            sql.set_user_balance(other_user, int(self.gift_amount.value))
            await interaction.edit_original_message(**gift_confirmation_message, view=None)
            logging.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {self.username.value} –ª—è–≥—É—à–µ–∫ "
                         f"–≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ {self.gift_amount.value} —à—Ç.")
        else:
            await interaction.followup.send(**gift_confirmation_message, ephemeral=True)


class GiftView(AdminActionBasicView):
    def __init__(self):
        super().__init__()

    @nextcord.ui.button(label="–°–¥–µ–ª–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫ —Å –±–∞—Ä—Å–∫–æ–≥–æ –ø–ª–µ—á–∞", style=nextcord.ButtonStyle.green, emoji="üí∞")
    async def gift_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.send_modal(GiftModal())


class TaxesSetupModal(nextcord.ui.Modal):
    def __init__(self):
        super().__init__("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–∑–º–µ—Ä –Ω–∞–ª–æ–≥–∞")

        self.tax = nextcord.ui.TextInput(
            label="–†–∞–∑–º–µ—Ä –Ω–∞–ª–æ–≥–∞",
            max_length=1,
            required=True,
            style=nextcord.TextInputStyle.short
        )
        self.add_item(self.tax)

    async def callback(self, interaction: nextcord.Interaction) -> None:
        await interaction.response.defer()
        is_valid = utils.validate(self.tax.value, check_type='tax')
        if not is_valid:
            return await interaction.followup.send(
                **messages.taxes_setup_error(),
                ephemeral=True
            )
        taxation = config.TAXATION
        taxation["tax_value"] = int(self.tax.value)
        utils.set_taxation(taxation)
        logging.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –Ω–∞–ª–æ–≥–∞, —Ä–∞–≤–Ω—ã–π {self.tax.value} –ª—è–≥—É—à–µ–∫.")
        await interaction.edit_original_message(
            **messages.taxes_setup_confirmation_message(value=int(self.tax.value), change_tax_value=True),
            view=None
        )


class TaxesSetupView(AdminActionBasicView):
    def __init__(self):
        super().__init__()

    @nextcord.ui.button(label="–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è", style=nextcord.ButtonStyle.green, emoji="üíµ")
    async def tax_status_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        taxation = config.TAXATION
        is_taxes_active = taxation["is_taxes_active"]
        if is_taxes_active:
            taxation["is_taxes_active"] = False
            taxation["tax_collection_date"] = ""
            logging.info("–°–±–æ—Ä –Ω–∞–ª–æ–≥–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω.")
        else:
            taxation["is_taxes_active"] = True
            current_timestamp = utils.get_timestamp()
            current_month = utils.get_short_date(current_timestamp)
            taxation["tax_collection_date"] = current_month
            logging.info("–°–±–æ—Ä –Ω–∞–ª–æ–≥–æ–≤ –≤–∫–ª—é—á–µ–Ω.")
        utils.set_taxation(taxation)
        await interaction.edit_original_message(
            **messages.taxes_setup_confirmation_message(
                is_taxes_set_active=taxation["is_taxes_active"],
                value=taxation["tax_value"]
            ),
            view=None
        )

    @nextcord.ui.button(label="–í–µ–ª–∏—á–∏–Ω–∞ –Ω–∞–ª–æ–≥–∞", style=nextcord.ButtonStyle.green, emoji="üßÆ")
    async def tax_value_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.send_modal(TaxesSetupModal())


class PostNewsWindow(nextcord.ui.Modal):
    def __init__(self):
        super().__init__("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª")

        self.message_title = nextcord.ui.TextInput(
            label="–ó–∞–≥–æ–ª–æ–≤–æ–∫",
            max_length=100,
            required=True,
            placeholder="–¢–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞",
            style=nextcord.TextInputStyle.short
        )
        self.add_item(self.message_title)
        self.message_description = nextcord.ui.TextInput(
            label="–°–æ–æ–±—â–µ–Ω–∏–µ",
            required=True,
            placeholder="–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è",
            style=nextcord.TextInputStyle.paragraph
        )
        self.add_item(self.message_description)
        self.image_url = nextcord.ui.TextInput(
            label="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
            placeholder="(–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –≤ —Ñ–æ—Ä–º–∞—Ç–∞—Ö jpg/png/gif)",
            required=False,
            style=nextcord.TextInputStyle.short
        )
        self.add_item(self.image_url)

    async def callback(self, interaction: nextcord.Interaction) -> None:
        await interaction.response.defer()
        image_binary_data, image_filename = utils.image_download(self.image_url.value)
        if self.image_url.value and not image_binary_data:
            return await interaction.followup.send(
                **messages.image_url_error(),
                ephemeral=True
            )
        channel = interaction.guild.get_channel(config.NEWS_CHANNEL_ID)
        await channel.send(**messages.news_channel_message(
            self.message_title.value, self.message_description.value, image_binary_data, image_filename))
        logging.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ '{self.message_description.value}' –≤ –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª.")
        await interaction.followup.send(**messages.post_news_confirmation(), ephemeral=True)


class PostNewsView(AdminActionBasicView):
    def __init__(self):
        super().__init__()

    @nextcord.ui.button(label="–°–æ–∑–¥–∞—Ç—å –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å", style=nextcord.ButtonStyle.green, emoji="üóû")
    async def send_message_by_bot_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.send_modal(PostNewsWindow())


class RoleManageView(AdminActionBasicView):
    def __init__(self):
        super().__init__()

    @nextcord.ui.button(label="–°–Ω—è—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Ä–æ–ª–∏", style=nextcord.ButtonStyle.green, emoji="‚ûñ")
    async def remove_expired_roles_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        expired_premium_role_users_ids = {
            "lite": sql.remove_expired_premium_role_users(utils.get_timestamp(), role_tier="lite"),
            "basic": sql.remove_expired_premium_role_users(utils.get_timestamp())
        }
        if expired_premium_role_users_ids["lite"]:
            premium_role_lite = interaction.guild.get_role(config.PREMIUM_ROLE["lite"])
            for expired_premium_role_lite_user_id in expired_premium_role_users_ids["lite"]:
                expired_premium_role_lite_user = interaction.guild.get_member(expired_premium_role_lite_user_id[0])
                await expired_premium_role_lite_user.remove_roles(premium_role_lite)
            logging.info("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–Ω–∏–º–∞–µ—Ç —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–æ–ª–∏ –ª—è–≥—É—à–æ–Ω–∫–∞, —Å—Ä–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ—Ç–æ—Ä—ã—Ö –∏—Å—Ç–µ–∫.")
        if expired_premium_role_users_ids["basic"]:
            premium_role_basic = interaction.guild.get_role(config.PREMIUM_ROLE["basic"])
            for expired_premium_role_basic_user_id in expired_premium_role_users_ids["basic"]:
                expired_premium_role_basic_user = interaction.guild.get_member(expired_premium_role_basic_user_id[0])
                await expired_premium_role_basic_user.remove_roles(premium_role_basic)
            logging.info("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–Ω–∏–º–∞–µ—Ç —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–æ–ª–∏ –ª—è–≥—É—à–∫–∏, —Å—Ä–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ—Ç–æ—Ä—ã—Ö –∏—Å—Ç–µ–∫.")
        has_expired_roles = expired_premium_role_users_ids["basic"] or expired_premium_role_users_ids["lite"]
        if has_expired_roles:
            await interaction.edit_original_message(**messages.expired_roles_removal(), view=None)
        else:
            await interaction.followup.send(**messages.expired_roles_removal(has_expired_roles=False), ephemeral=True)


class CacheView(AdminActionBasicView):
    def __init__(self):
        super().__init__()

    @nextcord.ui.button(label="–ù–∞—á–∞—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ", style=nextcord.ButtonStyle.green, emoji="üìÄ")
    async def cache_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        files_count_printable = utils.refresh_cache()
        await interaction.edit_original_message(
            **messages.caching_confirmation(files_count_printable),
            view=None
        )


class ResetDatabaseModal(nextcord.ui.Modal):
    def __init__(self):
        super().__init__("–û–±–Ω—É–ª–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")

        self.database_path = nextcord.ui.TextInput(
            label="–ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
            required=True,
            style=nextcord.TextInputStyle.short
        )
        self.add_item(self.database_path)

    async def callback(self, interaction: nextcord.Interaction) -> None:
        await interaction.response.defer()
        is_valid = False
        if self.database_path.value == config.DATABASE_PATH:
            is_valid = utils.reset_database()
        await interaction.followup.send(**messages.reset_database_confirmation(is_valid), ephemeral=True)


class ResetDatabaseView(AdminActionBasicView):
    def __init__(self):
        super().__init__()

    @nextcord.ui.button(label="–ü—É—Å—Ç—å –≤—Å–µ –≥–æ—Ä–∏—Ç", style=nextcord.ButtonStyle.red, emoji="üî•")
    async def reset_database_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.send_modal(ResetDatabaseModal())


class QuizModal(nextcord.ui.Modal):
    def __init__(self, current_quiz):
        super().__init__("–ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É!")
        self.current_quiz = current_quiz

        self.question = nextcord.ui.TextInput(
            label="–í–æ–ø—Ä–æ—Å",
            placeholder="–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã",
            required=True,
            style=nextcord.TextInputStyle.paragraph
        )
        self.add_item(self.question)
        self.answer = nextcord.ui.TextInput(
            label="–û—Ç–≤–µ—Ç",
            placeholder="–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç",
            required=True,
            style=nextcord.TextInputStyle.short
        )
        self.add_item(self.answer)
        self.prize_amount = nextcord.ui.TextInput(
            label="–†–∞–∑–º–µ—Ä –Ω–∞–≥—Ä–∞–¥—ã –≤ –ª—è–≥—É—à–∫–∞—Ö",
            max_length=3,
            required=True,
            default_value="1",
            style=nextcord.TextInputStyle.short
        )
        self.add_item(self.prize_amount)
        self.prize_special = nextcord.ui.TextInput(
            label="–û—Å–æ–±–∞—è –Ω–∞–≥—Ä–∞–¥–∞",
            placeholder="–¢–æ–ª—å–∫–æ –¥–ª—è –∑–Ω–∞—Ç–æ–∫–æ–≤ –≤—ã—Å—à–µ–π –ª–∏–≥–∏!",
            required=False,
            style=nextcord.TextInputStyle.short
        )
        self.add_item(self.prize_special)
        self.image_url = nextcord.ui.TextInput(
            label="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
            placeholder="(–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –≤ —Ñ–æ—Ä–º–∞—Ç–∞—Ö jpg/png/gif)",
            required=False,
            style=nextcord.TextInputStyle.short
        )
        self.add_item(self.image_url)

    async def callback(self, interaction: nextcord.Interaction) -> None:
        await interaction.response.defer()
        is_valid = utils.validate(self.prize_amount.value, check_type='quiz')
        if not is_valid:
            return await interaction.followup.send(
                **messages.quiz_error(reason="incorrect_prize_amount"),
                ephemeral=True
            )
        image_binary_data, image_filename = utils.image_download(self.image_url.value)
        if self.image_url.value and not image_binary_data:
            return await interaction.followup.send(
                **messages.image_url_error(),
                ephemeral=True
            )
        self.current_quiz.start(
            self.question.value,
            self.answer.value,
            self.prize_amount.value,
            self.prize_special.value
        )
        logging.info("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—É.")
        await interaction.followup.send(
            **messages.quiz(self.question.value, image_binary_data, image_filename),
            allowed_mentions=nextcord.AllowedMentions(roles=True)
        )
        await asyncio.sleep(config.QUIZ_ROUND_TIME)
        await interaction.followup.send(**messages.quiz_time_up(self.answer.value))
