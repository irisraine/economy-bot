import nextcord
import logging
import asyncio
import engine.bot as bot
import engine.sql as sql
import engine.messages as messages
import engine.utils as utils
import engine.config as config
import engine.gamble as gamble


def items():
    return {
        "track": {"price": config.PRICES['track'], "description": "–¢—Ä–µ–∫ –ø—Ä–æ –õ–µ—Ö—É"},
        "frog": {"price": config.PRICES['frog'], "description": "–õ—è–≥—É—à–∫—É"},
        "cite": {"price": config.PRICES['cite'], "description": "–ú—É–¥—Ä—É—é –º—ã—Å–ª—å"},
        "animal": {"price": config.PRICES['animal'], "description": "–ü–∏—Ç–æ–º—Ü–∞"},
        "meme": {"price": config.PRICES['meme'], "description": "–ú–µ–º"},
        "food": {"price": config.PRICES['food'], "description": "–ü–∏—â—É –∞—Ä–∏—Å—Ç–æ–∫—Ä–∞—Ç–æ–≤"},
        "soundpad": {"price": config.PRICES['soundpad'], "description": "–°–∞—É–Ω–¥–ø–∞–¥"},
        "drawing": {"price": config.PRICES['drawing'], "description": "–°–∫–µ—Ç—á"},
        "rain": {"price": config.PRICES['rain'], "description": "–î–æ–∂–¥—å –∏–∑ –ª—è–≥—É—à–µ–∫"},
        "role_lite": {"price": config.PRICES['role_lite'], "description": "–†–æ–ª—å –ª—è–≥—É—à–æ–Ω–∫–∞"},
        "role": {"price": config.PRICES['role'], "description": "–†–æ–ª—å –ª—è–≥—É—à–∫–∏"},
        "band": {"price": config.PRICES['band'], "description": "–ë–∞–Ω–¥—É"},
    }


def probabilities():
    return {
        "common": int(config.PROBABILITIES['common'] * 100),
        "uncommon": int(config.PROBABILITIES['uncommon'] * 100),
        "epic": int(config.PROBABILITIES['epic'] * 100),
        "legendary": int(config.PROBABILITIES['legendary'] * 100)
    }


options = [
    nextcord.SelectOption(label="–ü–æ—Å–ª—É—à–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ç—Ä–µ–∫ –ø—Ä–æ –õ–µ—Ö—É", value="track", emoji=f"{config.ITEMS_EMOJI['track']}"),
    nextcord.SelectOption(label="–°–ª—É—á–∞–π–Ω–∞—è –ª—è–≥—É—à–∫–∞", value="frog", emoji=f"{config.ITEMS_EMOJI['frog']}"),
    nextcord.SelectOption(label="–°–ª—É—á–∞–π–Ω–∞—è –º—É–¥—Ä–∞—è –º—ã—Å–ª—å –Ω–∞ –¥–µ–Ω—å", value="cite", emoji=f"{config.ITEMS_EMOJI['cite']}"),
    nextcord.SelectOption(label="–°–ª—É—á–∞–π–Ω–æ–µ —Ñ–æ—Ç–æ –¥–æ–º–∞—à–Ω–µ–≥–æ –ª—é–±–∏–º—Ü–∞", value="animal", emoji=f"{config.ITEMS_EMOJI['animal']}"),
    nextcord.SelectOption(label="–°–ª—É—á–∞–π–Ω—ã–π –º–µ–º", value="meme", emoji=f"{config.ITEMS_EMOJI['meme']}"),
    nextcord.SelectOption(label="–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ ¬´–ñ–∞–±–∏–π –∫–≤–∞–∫¬ª", value="food", emoji=f"{config.ITEMS_EMOJI['food']}"),
    nextcord.SelectOption(label="–°–ª—É—á–∞–π–Ω—ã–π —Å–∞—É–Ω–¥–ø–∞–¥ –õ–µ—Ö–∏", value="soundpad", emoji=f"{config.ITEMS_EMOJI['soundpad']}"),
    nextcord.SelectOption(label="–ê–≤—Ç–æ—Ä—Å–∫–∏–π —Å–∫–µ—Ç—á", value="drawing", emoji=f"{config.ITEMS_EMOJI['drawing']}"),
    nextcord.SelectOption(label="–î–æ–∂–¥—å –∏–∑ –ª—è–≥—É—à–µ–∫", value="rain", emoji=f"{config.ITEMS_EMOJI['rain']}"),
    nextcord.SelectOption(label="–†–æ–ª—å ¬´–õ—è–≥—É—à–æ–Ω–æ–∫¬ª –Ω–∞ 1 –º–µ—Å—è—Ü", value="role_lite", emoji=f"{config.ITEMS_EMOJI['role_lite']}"),
    nextcord.SelectOption(label="–†–æ–ª—å ¬´–õ–µ–≥—É—à—å–∫–∞¬ª –Ω–∞ 1 –º–µ—Å—è—Ü", value="role", emoji=f"{config.ITEMS_EMOJI['role']}"),
    nextcord.SelectOption(label="–°–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –±–∞–Ω–¥—É", value="band", emoji=f"{config.ITEMS_EMOJI['band']}"),
]


class ShopMenuView(nextcord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @nextcord.ui.select(
        placeholder="–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ç–æ–≤–∞—Ä",
        options=options
    )
    async def select_purchase_callback(self, select, interaction: nextcord.Interaction):
        item = items()[select.values[0]]['description']
        price = items()[select.values[0]]['price']

        await interaction.response.defer()
        await interaction.edit_original_message(
            **messages.purchasing_confirmation(item, price),
            view=PurchaseView(price, select.values[0])
        )

    @nextcord.ui.button(label="–ó–∞–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", style=nextcord.ButtonStyle.gray, emoji="‚ùå")
    async def close_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        await interaction.delete_original_message()


class PurchaseView(nextcord.ui.View):
    def __init__(self, price, shop_item):
        super().__init__(timeout=None)
        self.price = price
        self.shop_item = shop_item

    @nextcord.ui.button(label="–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Ç–æ–≤–∞—Ä", style=nextcord.ButtonStyle.green, emoji="üíµ")
    async def purchase_confirm_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        user_balance = sql.get_user_balance(interaction.user)
        await interaction.response.defer()
        if self.price > user_balance:
            return await interaction.edit_original_message(
                **messages.insufficient_balance(),
                view=None
            )
        if self.shop_item in ["role_lite", "role"]:
            premium_roles = [
                nextcord.utils.get(interaction.guild.roles, id=config.PREMIUM_ROLE['lite']),
                nextcord.utils.get(interaction.guild.roles, id=config.PREMIUM_ROLE['basic']),
                nextcord.utils.get(interaction.guild.roles, id=config.PREMIUM_ROLE['max'])
            ]
            user_premium_role = next((role for role in premium_roles if role in interaction.user.roles), None)
            if user_premium_role:
                return await interaction.edit_original_message(
                    **messages.already_has_premium_role(interaction.user, user_premium_role),
                    view=None
                )
        sql.set_user_balance(interaction.user, -self.price)
        sql.set_bank_balance(self.price)
        purchased_item_message = messages.item_purchased(self.shop_item)
        if self.shop_item in ["drawing", "rain", "role_lite", "role", "band"]:
            request_to_admin = bot.client.get_user(config.ADMIN_ID)
            await request_to_admin.send(**messages.service_request(interaction.user.mention, self.shop_item))
        if self.shop_item == "role_lite":
            premium_lite_role = interaction.guild.get_role(config.PREMIUM_ROLE['lite'])
            expiration_time = utils.get_timestamp() + config.PREMIUM_ROLE_DURATION
            sql.add_premium_role_owner(interaction.user, expiration_time, lite=True)
            await interaction.user.add_roles(premium_lite_role)
        if self.shop_item == "role":
            premium_role = interaction.guild.get_role(config.PREMIUM_ROLE['basic'])
            expiration_time = utils.get_timestamp() + config.PREMIUM_ROLE_DURATION
            sql.add_premium_role_owner(interaction.user, expiration_time)
            await interaction.user.add_roles(premium_role)
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {interaction.user.name} –ø–æ–∫—É–ø–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{self.shop_item}'.")
        await interaction.edit_original_message(
            **purchased_item_message,
            view=None
        )

    @nextcord.ui.button(label="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–∏–ª–∞–≤–∫—É", style=nextcord.ButtonStyle.gray, emoji="‚óÄÔ∏è")
    async def return_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        await interaction.edit_original_message(
            **messages.shop(),
            view=ShopMenuView()
        )


class TransferView(nextcord.ui.View):
    def __init__(self, transfer_amount, other_user, original_user):
        super().__init__(timeout=None)
        self.transfer_amount = transfer_amount
        self.other_user = other_user
        self.original_user = original_user

    @nextcord.ui.button(label="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥", style=nextcord.ButtonStyle.green, emoji="‚úÖ")
    async def transfer_confirm_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        if interaction.user.id != self.original_user.id:
            return await interaction.edit_original_message(
                **messages.other_user_transfer_error(),
                view=None
            )
        user_balance = sql.get_user_balance(interaction.user)
        if self.transfer_amount > user_balance:
            return await interaction.edit_original_message(
                **messages.transfer_confirmation(self.other_user, self.transfer_amount, is_failed=True),
                view=None
            )
        sql.set_user_balance(interaction.user, -self.transfer_amount)
        sql.set_user_balance(self.other_user, self.transfer_amount)
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {interaction.user.name} –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {self.other_user.name} –ª—è–≥—É—à–µ–∫ "
                     f"–≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ {self.transfer_amount} —à—Ç.")
        await interaction.edit_original_message(
            **messages.transfer_confirmation(self.other_user, self.transfer_amount),
            view=None
        )

    @nextcord.ui.button(label="–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞", style=nextcord.ButtonStyle.gray, emoji="‚ùå")
    async def close_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        await interaction.delete_original_message()


class AdminMenuView(nextcord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    async def interaction_check(self, interaction: nextcord.Interaction):
        if interaction.user.guild_permissions.administrator:
            return True
        else:
            await interaction.response.send_message(**messages.admin_option_only_warning(), ephemeral=True)
            return False

    @nextcord.ui.select(
        placeholder="–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é",
        options=[
            nextcord.SelectOption(
                label="–ö—ç—à–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã",
                value="cache",
                description="–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞",
                emoji="‚öôÔ∏è"),
            nextcord.SelectOption(
                label="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—á—ë—Ç –±–∞–Ω–∫–∞",
                value="bank_balance",
                description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å, —Å–∫–æ–ª—å–∫–æ –ª—è–≥—É—à–µ–∫ –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏",
                emoji="ü™ô"),
            nextcord.SelectOption(
                label="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—á—ë—Ç–∞ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
                value="all_users_balance",
                description="–ò–∑—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä—É–¥–æ–≤ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
                emoji="üìà"),
            nextcord.SelectOption(
                label="–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–∫–æ–ª—å–∫–æ —É–≥–æ–¥–Ω–æ –ª—è–≥—É—à–µ–∫ —É—á–∞—Å—Ç–Ω–∏–∫—É",
                value="gift",
                description="–û–¥–∞—Ä–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –±–æ–ª–æ—Ç–Ω—ã–º —Å–æ–∫—Ä–æ–≤–∏—â–µ–º",
                emoji="üíé"),
            nextcord.SelectOption(
                label="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—ã",
                value="prices",
                description="–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ",
                emoji="üßÆ"),
            nextcord.SelectOption(
                label="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –æ—Ç–ª–æ–≤–∞",
                value="probabilities",
                description="–ü–æ–±—ã—Ç—å –≤–ª–∞—Å—Ç–µ–ª–∏–Ω–æ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π",
                emoji="üïπ"),
            nextcord.SelectOption(
                label="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫—É–ª–¥–∞—É–Ω",
                value="cooldown",
                description="–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–æ–ø—É—Å—Ç–∏–º—É—é —á–∞—Å—Ç–æ—Ç—É –æ—Ç–ª–æ–≤–∞",
                emoji="‚è∞"),
            nextcord.SelectOption(
                label="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ª–∏—Ü–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –Ω–æ–≤–æ—Å—Ç–µ–π",
                value="post_news",
                description="–ì–æ–≤–æ—Ä–∏—Ç—å –æ—Ç –∏–º–µ–Ω–∏ –ª—è–≥—É—à–∞—á—å–µ–≥–æ –ø—Ä–µ–¥–≤–æ–¥–∏—Ç–µ–ª—è",
                emoji="üí¨"),
            nextcord.SelectOption(
                label="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã –æ–±–ª–∞–¥–∞—Ç–µ–ª–µ–π —Ä–æ–ª–µ–π –ª—è–≥—É—à–æ–Ω–∫–∞ –∏ –ª—è–≥—É—à–∫–∏",
                value="role_manage",
                description="–ö–æ–º—É –∏ —Å–∫–æ–ª—å–∫–æ –µ—â–µ –æ—Å—Ç–∞–ª–æ—Å—å –∫–≤–∞–∫–∞—Ç—å",
                emoji="üëë"),
            nextcord.SelectOption(
                label="–û–±–Ω—É–ª–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö",
                value="reset_database",
                description="–£—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–ø–æ–∫–∞–ª–∏–ø—Å–∏—Å",
                emoji="üî™"),
        ]
    )
    async def select_admin_menu_callback(self, select, interaction: nextcord.Interaction):
        admin_actions = {
            "bank_balance": {"message": messages.bank_balance(), "view": None},
            "all_users_balance": {"message": messages.all_users_balances(), "view": None},
            "gift": {"message": messages.gift(), "view": GiftView()},
            "prices": {"message": messages.set_price(), "view": SetPriceView()},
            "probabilities": {"message": messages.set_probabilities(), "view": SetProbabilitiesView()},
            "cooldown": {"message": messages.set_cooldown(), "view": SetCooldownView()},
            "post_news": {"message": messages.post_news(), "view": PostNewsView()},
            "role_manage": {"message": messages.role_manage(), "view": RoleManageView()},
            "reset_database": {"message": messages.reset_database(), "view": ResetDatabaseView()},
        }
        await interaction.response.defer()

        if select.values[0] == "cache":
            files_count_printable = utils.refresh_cache()
            await interaction.edit_original_message(
                **messages.caching_confirmation(files_count_printable),
                view=AdminActionBasicView()
            )
        else:
            await interaction.edit_original_message(
                **admin_actions[select.values[0]]["message"],
                view=admin_actions[select.values[0]]["view"]
            )

    @nextcord.ui.button(label="–ó–∞–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω–∫—É", style=nextcord.ButtonStyle.gray, emoji="‚ùå")
    async def close_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        await interaction.delete_original_message()


class AdminActionBasicView(nextcord.ui.View):
    def __init__(self, *args, **kwargs):
        super().__init__(timeout=None, *args, **kwargs)

    async def interaction_check(self, interaction: nextcord.Interaction):
        if interaction.user.guild_permissions.administrator:
            return True
        else:
            await interaction.response.send_message(**messages.admin_option_only_warning(), ephemeral=True)
            return False

    @nextcord.ui.button(label="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω–∫—É", style=nextcord.ButtonStyle.gray, emoji="‚óÄÔ∏è", row=2)
    async def return_to_admin_menu_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        await interaction.edit_original_message(
            **messages.admin(),
            view=AdminMenuView()
        )

    @nextcord.ui.button(label="–ó–∞–∫—Ä—ã—Ç—å", style=nextcord.ButtonStyle.gray, emoji="‚ùå", row=2)
    async def close_notify_message_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        await interaction.delete_original_message()


class SetPriceModal(nextcord.ui.Modal):
    def __init__(self, item):
        self.item = item
        super().__init__(f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—É—é —Ü–µ–Ω—É –Ω–∞ {items()[self.item]['description']}")

        self.price = nextcord.ui.TextInput(
            label="–ù–æ–≤–∞—è —Ü–µ–Ω–∞",
            max_length=4,
            required=True,
            placeholder=f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {items()[self.item]['price']} –ª—è–≥—É—à–µ–∫",
            style=nextcord.TextInputStyle.short
        )
        self.add_item(self.price)

    async def callback(self, interaction: nextcord.Interaction) -> None:
        await interaction.response.defer()
        is_valid = utils.validate(self.price.value, check_type='price')
        if is_valid:
            utils.set_price(self.item, self.price.value)
            logging.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–µ–Ω—É –Ω–∞ —Ç–æ–≤–∞—Ä –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{self.item}' "
                         f"—Ä–∞–≤–Ω–æ–π {self.price.value} –ª—è–≥—É—à–µ–∫.")
        await interaction.followup.send(**messages.set_price_confirmation(is_valid), ephemeral=True)


class SetPriceView(AdminActionBasicView):
    def __init__(self):
        super().__init__()

    @nextcord.ui.select(
        placeholder="–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ç–æ–≤–∞—Ä",
        options=options
    )
    async def set_price_callback(self, select, interaction: nextcord.Interaction):
        await interaction.response.send_modal(SetPriceModal(select.values[0]))

    @nextcord.ui.button(label="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", style=nextcord.ButtonStyle.green, emoji="üí≤")
    async def default_prices_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        utils.set_price(reset=True)
        logging.info("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ.")
        await interaction.followup.send(**messages.reset_prices_confirmation(), ephemeral=True)


class SetProbabilitiesModal(nextcord.ui.Modal):
    def __init__(self):
        super().__init__("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –ø–æ–∏–º–∫–∏")

        self.common = nextcord.ui.TextInput(
            label="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —É–ª–æ–≤",
            max_length=4,
            required=True,
            placeholder=f"–¢–µ–∫—É—â–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {probabilities()['common']} %",
            style=nextcord.TextInputStyle.short
        )
        self.add_item(self.common)
        self.uncommon = nextcord.ui.TextInput(
            label="–†–µ–¥–∫–∏–π —É–ª–æ–≤",
            max_length=4,
            required=True,
            placeholder=f"–¢–µ–∫—É—â–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {probabilities()['uncommon']} %",
            style=nextcord.TextInputStyle.short
        )
        self.add_item(self.uncommon)
        self.epic = nextcord.ui.TextInput(
            label="–≠–ø–∏—á–Ω—ã–π —É–ª–æ–≤",
            max_length=4,
            required=True,
            placeholder=f"–¢–µ–∫—É—â–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {probabilities()['epic']} %",
            style=nextcord.TextInputStyle.short
        )
        self.add_item(self.epic)
        self.legendary = nextcord.ui.TextInput(
            label="–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π —É–ª–æ–≤",
            max_length=4,
            required=True,
            placeholder=f"–¢–µ–∫—É—â–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {probabilities()['legendary']} %",
            style=nextcord.TextInputStyle.short
        )
        self.add_item(self.legendary)

    async def callback(self, interaction: nextcord.Interaction) -> None:
        await interaction.response.defer()
        updated_probabilities = {
            "common": self.common.value,
            "uncommon": self.uncommon.value,
            "epic": self.epic.value,
            "legendary": self.legendary.value
        }
        is_valid = utils.validate(updated_probabilities, check_type='probabilities')
        if is_valid:
            utils.set_probabilities(updated_probabilities)
            logging.info("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –æ—Ç–ª–æ–≤–∞ –ª—è–≥—É—à–µ–∫: "
                         f"—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π - {self.common.value}%, "
                         f"—Ä–µ–¥–∫–∏–π - {self.uncommon.value}%, "
                         f"—ç–ø–∏—á–Ω—ã–π - {self.epic.value}%, "
                         f"–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π - {self.legendary.value}%. ")
        await interaction.followup.send(**messages.set_probabilities_confirmation(is_valid), ephemeral=True)


class SetProbabilitiesView(AdminActionBasicView):
    def __init__(self):
        super().__init__()

    @nextcord.ui.button(label="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏", style=nextcord.ButtonStyle.green, emoji="üé≤")
    async def set_probabilities_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.send_modal(SetProbabilitiesModal())

    @nextcord.ui.button(label="–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é", style=nextcord.ButtonStyle.green, emoji="üíØ")
    async def default_probabilities_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        utils.set_probabilities(reset=True)
        logging.info("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –æ—Ç–ª–æ–≤–∞ –ª—è–≥—É—à–µ–∫.")
        await interaction.followup.send(**messages.reset_probabilities_confirmation(), ephemeral=True)


class SetCooldownModal(nextcord.ui.Modal):
    def __init__(self):
        super().__init__("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É –ª–æ–≤–ª–µ–π")

        self.cooldown = nextcord.ui.TextInput(
            label="–ö—É–ª–¥–∞—É–Ω",
            max_length=2,
            required=True,
            placeholder=f"–¢–µ–∫—É—â–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: "
                        f"{config.CATCHING_COOLDOWN} {utils.numeral(config.CATCHING_COOLDOWN, value_type='hours')}",
            style=nextcord.TextInputStyle.short
        )
        self.add_item(self.cooldown)

    async def callback(self, interaction: nextcord.Interaction) -> None:
        await interaction.response.defer()
        is_valid = utils.validate(self.cooldown.value, check_type='cooldown')
        if is_valid:
            utils.set_cooldown(self.cooldown.value)
            logging.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–µ–ª–∏—á–∏–Ω—É –∫—É–ª–¥–∞—É–Ω–∞ —Ä–∞–≤–Ω–æ–π {self.cooldown.value} —á.")
        await interaction.followup.send(**messages.set_cooldown_confirmation(is_valid), ephemeral=True)


class SetCooldownView(AdminActionBasicView):
    def __init__(self):
        super().__init__()

    @nextcord.ui.button(label="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫—É–ª–¥–∞—É–Ω", style=nextcord.ButtonStyle.green, emoji="‚è≥")
    async def set_cooldown_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.send_modal(SetCooldownModal())

    @nextcord.ui.button(label="–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é", style=nextcord.ButtonStyle.green, emoji="‚è±")
    async def default_cooldown_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        utils.set_cooldown(reset=True)
        logging.info("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –≤–µ–ª–∏—á–∏–Ω—É –∫—É–ª–¥–∞—É–Ω–∞.")
        await interaction.followup.send(**messages.reset_cooldown_confirmation(), ephemeral=True)


class GiftModal(nextcord.ui.Modal):
    def __init__(self):
        super().__init__("–ü–æ–¥–∞—Ä–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫—É –±–æ–ª–æ—Ç–Ω–æ–µ —Å–æ–∫—Ä–æ–≤–∏—â–µ")

        self.username = nextcord.ui.TextInput(
            label="Discord username",
            required=True,
            style=nextcord.TextInputStyle.short
        )
        self.add_item(self.username)
        self.gift_amount = nextcord.ui.TextInput(
            label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—è–≥—É—à–µ–∫",
            max_length=4,
            required=True,
            style=nextcord.TextInputStyle.short
        )
        self.add_item(self.gift_amount)

    async def callback(self, interaction: nextcord.Interaction) -> None:
        await interaction.response.defer()
        is_valid = utils.validate(self.gift_amount.value, check_type='gift')
        other_user = nextcord.utils.get(bot.client.get_all_members(), name=self.username.value)
        gift_confirmation_message = messages.gift_confirmation(other_user, self.gift_amount.value, is_valid)
        if other_user and is_valid:
            sql.set_user_balance(other_user, int(self.gift_amount.value))
            await interaction.edit_original_message(**gift_confirmation_message, view=None)
            logging.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {self.username.value} –ª—è–≥—É—à–µ–∫ "
                         f"–≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ {self.gift_amount.value} —à—Ç.")
        else:
            await interaction.followup.send(**gift_confirmation_message, ephemeral=True)


class GiftView(AdminActionBasicView):
    def __init__(self):
        super().__init__()

    @nextcord.ui.button(label="–°–¥–µ–ª–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫ —Å –±–∞—Ä—Å–∫–æ–≥–æ –ø–ª–µ—á–∞", style=nextcord.ButtonStyle.green, emoji="üí∞")
    async def gift_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.send_modal(GiftModal())


class PostNewsWindow(nextcord.ui.Modal):
    def __init__(self):
        super().__init__("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª")

        self.message_title = nextcord.ui.TextInput(
            label="–ó–∞–≥–æ–ª–æ–≤–æ–∫",
            max_length=100,
            required=True,
            placeholder="–¢–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞",
            style=nextcord.TextInputStyle.short
        )
        self.add_item(self.message_title)
        self.message_description = nextcord.ui.TextInput(
            label="–°–æ–æ–±—â–µ–Ω–∏–µ",
            required=True,
            placeholder="–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è",
            style=nextcord.TextInputStyle.paragraph
        )
        self.add_item(self.message_description)
        self.image_url = nextcord.ui.TextInput(
            label="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
            placeholder="(–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –≤ —Ñ–æ—Ä–º–∞—Ç–∞—Ö jpg/png/gif)",
            required=False,
            style=nextcord.TextInputStyle.short
        )
        self.add_item(self.image_url)

    async def callback(self, interaction: nextcord.Interaction) -> None:
        await interaction.response.defer()
        image_binary_data, image_filename = utils.image_download(self.image_url.value)
        if self.image_url.value and not image_binary_data:
            return await interaction.followup.send(
                **messages.image_url_error(),
                ephemeral=True
            )
        channel = interaction.guild.get_channel(config.NEWS_CHANNEL_ID)
        await channel.send(**messages.news_channel_message(
            self.message_title.value, self.message_description.value, image_binary_data, image_filename))
        logging.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ '{self.message_description.value}' –≤ –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª.")
        await interaction.followup.send(**messages.post_news_confirmation(), ephemeral=True)


class PostNewsView(AdminActionBasicView):
    def __init__(self):
        super().__init__()

    @nextcord.ui.button(label="–°–æ–∑–¥–∞—Ç—å –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å", style=nextcord.ButtonStyle.green, emoji="üóû")
    async def send_message_by_bot_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.send_modal(PostNewsWindow())


class RoleManageView(AdminActionBasicView):
    def __init__(self):
        super().__init__()

    @nextcord.ui.button(label="–°–Ω—è—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Ä–æ–ª–∏", style=nextcord.ButtonStyle.green, emoji="‚ûñ")
    async def remove_expired_roles_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        expired_premium_role_lite_owners_ids = sql.remove_expired_premium_role_owners(utils.get_timestamp(), lite=True)
        expired_premium_role_owners_ids = sql.remove_expired_premium_role_owners(utils.get_timestamp())
        if expired_premium_role_lite_owners_ids:
            premium_lite_role = interaction.guild.get_role(config.PREMIUM_ROLE['lite'])
            for expired_premium_role_lite_owners_id in expired_premium_role_lite_owners_ids:
                expired_premium_role_lite_owner = interaction.guild.get_member(expired_premium_role_lite_owners_id[0])
                await expired_premium_role_lite_owner.remove_roles(premium_lite_role)
            logging.info("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–Ω–∏–º–∞–µ—Ç —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–æ–ª–∏ –ª—è–≥—É—à–æ–Ω–∫–∞, —Å—Ä–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ—Ç–æ—Ä—ã—Ö –∏—Å—Ç–µ–∫.")
        if expired_premium_role_owners_ids:
            premium_role = interaction.guild.get_role(config.PREMIUM_ROLE['basic'])
            for expired_premium_role_owner_id in expired_premium_role_owners_ids:
                expired_premium_role_owner = interaction.guild.get_member(expired_premium_role_owner_id[0])
                await expired_premium_role_owner.remove_roles(premium_role)
            logging.info("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–Ω–∏–º–∞–µ—Ç —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–æ–ª–∏ –ª—è–≥—É—à–∫–∏, —Å—Ä–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ—Ç–æ—Ä—ã—Ö –∏—Å—Ç–µ–∫.")
        is_expired_role_owners = expired_premium_role_owners_ids or expired_premium_role_lite_owners_ids
        await interaction.followup.send(**messages.role_expired_and_removed(is_expired_role_owners),
                                        ephemeral=True)


class ResetDatabaseModal(nextcord.ui.Modal):
    def __init__(self):
        super().__init__("–û–±–Ω—É–ª–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")

        self.database_path = nextcord.ui.TextInput(
            label="–ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
            required=True,
            style=nextcord.TextInputStyle.short
        )
        self.add_item(self.database_path)

    async def callback(self, interaction: nextcord.Interaction) -> None:
        await interaction.response.defer()
        is_valid = False
        if self.database_path.value == config.DATABASE_PATH:
            is_valid = utils.reset_database()
        await interaction.followup.send(**messages.reset_database_confirmation(is_valid), ephemeral=True)


class ResetDatabaseView(AdminActionBasicView):
    def __init__(self):
        super().__init__()

    @nextcord.ui.button(label="–ü—É—Å—Ç—å –≤—Å–µ –≥–æ—Ä–∏—Ç", style=nextcord.ButtonStyle.red, emoji="üî•")
    async def reset_database_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.send_modal(ResetDatabaseModal())


class QuizModal(nextcord.ui.Modal):
    def __init__(self):
        super().__init__("–ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É!")

        self.question = nextcord.ui.TextInput(
            label="–í–æ–ø—Ä–æ—Å",
            placeholder="–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã",
            required=True,
            style=nextcord.TextInputStyle.paragraph
        )
        self.add_item(self.question)
        self.answer = nextcord.ui.TextInput(
            label="–û—Ç–≤–µ—Ç",
            placeholder="–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç",
            required=True,
            style=nextcord.TextInputStyle.short
        )
        self.add_item(self.answer)
        self.prize_amount = nextcord.ui.TextInput(
            label="–†–∞–∑–º–µ—Ä –Ω–∞–≥—Ä–∞–¥—ã –≤ –ª—è–≥—É—à–∫–∞—Ö",
            max_length=3,
            required=True,
            default_value="1",
            style=nextcord.TextInputStyle.short
        )
        self.add_item(self.prize_amount)
        self.prize_special = nextcord.ui.TextInput(
            label="–û—Å–æ–±–∞—è –Ω–∞–≥—Ä–∞–¥–∞",
            placeholder="–¢–æ–ª—å–∫–æ –¥–ª—è –∑–Ω–∞—Ç–æ–∫–æ–≤ –≤—ã—Å—à–µ–π –ª–∏–≥–∏!",
            required=False,
            style=nextcord.TextInputStyle.short
        )
        self.add_item(self.prize_special)
        self.image_url = nextcord.ui.TextInput(
            label="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
            placeholder="(–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –≤ —Ñ–æ—Ä–º–∞—Ç–∞—Ö jpg/png/gif)",
            required=False,
            style=nextcord.TextInputStyle.short
        )
        self.add_item(self.image_url)

    async def callback(self, interaction: nextcord.Interaction) -> None:
        await interaction.response.defer()
        is_valid = utils.validate(self.prize_amount.value, check_type='quiz')
        if not is_valid:
            return await interaction.followup.send(
                **messages.quiz_error(reason="incorrect_prize_amount"),
                ephemeral=True
            )
        image_binary_data, image_filename = utils.image_download(self.image_url.value)
        if self.image_url.value and not image_binary_data:
            return await interaction.followup.send(
                **messages.image_url_error(),
                ephemeral=True
            )
        bot.current_quiz = utils.Quiz(
            self.question.value,
            self.answer.value,
            self.prize_amount.value,
            self.prize_special.value
        )
        logging.info("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—É.")
        await interaction.followup.send(
            **messages.quiz(self.question.value, image_binary_data, image_filename),
            allowed_mentions=nextcord.AllowedMentions(roles=True)
        )
        await asyncio.sleep(config.QUIZ_ROUND_TIME)
        await interaction.followup.send(**messages.quiz_time_up(self.answer.value))


class CasinoMenuView(nextcord.ui.View):
    def __init__(self, player):
        super().__init__(timeout=None)
        self.player = player

    @nextcord.ui.button(label="–û–¥–Ω–æ—Ä—É–∫–∏–π –±–∞–Ω–¥–∏—Ç", style=nextcord.ButtonStyle.blurple, emoji="üé∞")
    async def slot_machine_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        slot_machine_game = bot.gambling_pool[self.player]['slot_machine'] = gamble.SlotMachine(self.player)
        await interaction.edit_original_message(
            **messages.slot_machine(),
            view=SlotMachineView(self.player, slot_machine_game)
        )

    @nextcord.ui.button(label="–†—É–ª–µ—Ç–∫–∞", style=nextcord.ButtonStyle.blurple, emoji="üü¢")
    async def roulette_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        roulette_game = bot.gambling_pool[self.player]['roulette'] = gamble.Roulette(self.player)
        await interaction.edit_original_message(
            **messages.roulette(),
            view=RouletteBetsView(self.player, roulette_game)
        )

    @nextcord.ui.button(label="–ü–æ–∫–µ—Ä –Ω–∞ –∫–æ—Å—Ç—è—Ö", style=nextcord.ButtonStyle.blurple, emoji="üé≤")
    async def yahtzee_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        yahtzee_game = bot.gambling_pool[self.player]['yahtzee'] = gamble.Yahtzee(self.player)
        await interaction.edit_original_message(
            **messages.yahtzee(),
            view=YahtzeeView(self.player, yahtzee_game)
        )

    @nextcord.ui.button(label="–ó–∞–∫—Ä—ã—Ç—å –∫–∞–∑–∏–Ω–æ", style=nextcord.ButtonStyle.gray, emoji="‚ùå", row=2)
    async def close_notify_message_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        await interaction.delete_original_message()

############################### –†–£–õ–ï–¢–ö–ê ############################

class RouletteBetsView(nextcord.ui.View):
    def __init__(self, player, roulette_game):
        super().__init__(timeout=None)
        self.player = player
        self.roulette_game = roulette_game

    @nextcord.ui.button(label="–ß–∏—Å–ª–æ", style=nextcord.ButtonStyle.blurple, emoji="üü¢", row=0)
    async def straight_up_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.send_modal(RouletteStraightUpBetModal(self.roulette_game))

    @nextcord.ui.button(label="–ö—Ä–∞—Å–Ω–æ–µ", style=nextcord.ButtonStyle.blurple, emoji="üü•", row=0)
    async def red_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.send_modal(RouletteBinaryBetModal("red", self.roulette_game))

    @nextcord.ui.button(label="–ß–µ—Ä–Ω–æ–µ", style=nextcord.ButtonStyle.blurple, emoji="‚¨õ", row=0)
    async def black_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.send_modal(RouletteBinaryBetModal("black", self.roulette_game))

    @nextcord.ui.button(label="–ß–µ—Ç", style=nextcord.ButtonStyle.blurple, emoji="üá™", row=1)
    async def even_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.send_modal(RouletteBinaryBetModal("even", self.roulette_game))

    @nextcord.ui.button(label="–ù–µ—á–µ—Ç", style=nextcord.ButtonStyle.blurple, emoji="üá¥", row=1)
    async def odd_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.send_modal(RouletteBinaryBetModal("odd", self.roulette_game))

    @nextcord.ui.button(label="–í—ã—Å–æ–∫–∏–µ", style=nextcord.ButtonStyle.blurple, emoji="üîº", row=1)
    async def high_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.send_modal(RouletteBinaryBetModal("high", self.roulette_game))

    @nextcord.ui.button(label="–ù–∏–∑–∫–∏–µ", style=nextcord.ButtonStyle.blurple, emoji="üîΩ", row=1)
    async def low_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.send_modal(RouletteBinaryBetModal("low", self.roulette_game))

    @nextcord.ui.button(label="–î—é–∂–∏–Ω–∞", style=nextcord.ButtonStyle.blurple, emoji="‚èπÔ∏è", row=2)
    async def dozen_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.send_modal(RouletteTrinaryBetModal("dozen", self.roulette_game))

    @nextcord.ui.button(label="–†—è–¥", style=nextcord.ButtonStyle.blurple, emoji="‚ÜîÔ∏è", row=2)
    async def row_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.send_modal(RouletteTrinaryBetModal("row", self.roulette_game))

    @nextcord.ui.button(label="–°–∏–∫—Å–ª–∞–π–Ω", style=nextcord.ButtonStyle.blurple, emoji="‚è∏Ô∏è", row=2)
    async def sixline_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.send_modal(RouletteSixlineBetModal(self.roulette_game))

    @nextcord.ui.button(label="–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç–∞–≤–æ–∫", style=nextcord.ButtonStyle.green, emoji="‚úÖ", row=4)
    async def all_bets_listing_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        total_bets = self.roulette_game.overall_bet()
        if not total_bets:
            return await interaction.followup.send(
                **messages.roulette_no_bets_error(), ephemeral=True)
        await interaction.edit_original_message(
            **messages.roulette_all_bets_listing(self.roulette_game.bets, total_bets),
            view=RouletteBetsConfirmView(self.player, self.roulette_game)
        )

    @nextcord.ui.button(label="–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∏–≥—Ä—ã –≤ —Ä—É–ª–µ—Ç–∫—É", style=nextcord.ButtonStyle.gray, emoji="‚ùå", row=4)
    async def close_roulette_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        bot.gambling_pool[self.player]['roulette'] = None
        await interaction.delete_original_message()


class RouletteStraightUpBetModal(nextcord.ui.Modal):
    def __init__(self, roulette_game):
        super().__init__(f"–°–¥–µ–ª–∞—Ç—å –ø—Ä—è–º—É—é —Å—Ç–∞–≤–∫—É –Ω–∞ —á–∏—Å–ª–æ")
        self.roulette_game = roulette_game

        self.number = nextcord.ui.TextInput(
            label="–°–µ–∫—Ç–æ—Ä",
            max_length=2,
            required=True,
            placeholder=f"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 0 –¥–æ 36",
            style=nextcord.TextInputStyle.short
        )
        self.add_item(self.number)
        self.bet_amount = nextcord.ui.TextInput(
            label="–í–µ–ª–∏—á–∏–Ω–∞ —Å—Ç–∞–≤–∫–∏",
            max_length=2,
            required=True,
            placeholder=f"–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 10 –ª—è–≥—É—à–µ–∫",
            style=nextcord.TextInputStyle.short
        )
        self.add_item(self.bet_amount)

    async def callback(self, interaction: nextcord.Interaction) -> None:
        await interaction.response.defer()
        sector = utils.get_valid_field(self.number.value)
        if sector is False:
            return await interaction.followup.send(
                **messages.roulette_single_bet_confirmation(is_valid=False, category="sector"), ephemeral=True
            )
        bet = utils.get_valid_bet(self.bet_amount.value, limit=10)
        if not bet:
            return await interaction.followup.send(
                **messages.roulette_single_bet_confirmation(is_valid=False, category="bet"), ephemeral=True
            )
        is_enough_balance = utils.is_enough_balance(interaction.user, bet, self.roulette_game.overall_bet())
        if not is_enough_balance:
            return await interaction.followup.send(
                **messages.roulette_single_bet_confirmation(is_valid=False, category="balance"), ephemeral=True
            )
        self.roulette_game.place_bet(category="straight", value=sector, amount=bet)
        await interaction.followup.send(
            **messages.roulette_single_bet_confirmation(), ephemeral=True
        )


class RouletteBinaryBetModal(nextcord.ui.Modal):
    DESCRIPTION = {
        'even': ("—á–µ—Ç–Ω—ã–µ —á–∏—Å–ª–∞", "even_odd"),
        'odd': ("–Ω–µ—á–µ—Ç–Ω—ã–µ —á–∏—Å–ª–∞", "even_odd"),
        'red': ("–∫—Ä–∞—Å–Ω–æ–µ", "color"),
        'black': ("—á–µ—Ä–Ω–æ–µ", "color"),
        'high': ("–≤—ã—Å–æ–∫–∏–µ —á–∏—Å–ª–∞", "high_low"),
        'low': ("–Ω–∏–∑–∫–∏–µ —á–∏—Å–ª–∞", "high_low")
    }

    def __init__(self, bet_type, roulette_game):
        super().__init__(f"–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É –Ω–∞ {self.DESCRIPTION[bet_type][0]}")
        self.bet_type = bet_type
        self.roulette_game = roulette_game

        self.bet_amount = nextcord.ui.TextInput(
            label="–í–µ–ª–∏—á–∏–Ω–∞ —Å—Ç–∞–≤–∫–∏",
            max_length=2,
            required=True,
            placeholder=f"–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 25 –ª—è–≥—É—à–µ–∫",
            style=nextcord.TextInputStyle.short
        )
        self.add_item(self.bet_amount)

    async def callback(self, interaction: nextcord.Interaction) -> None:
        await interaction.response.defer()
        bet = utils.get_valid_bet(self.bet_amount.value, limit=25)
        if not bet:
            return await interaction.followup.send(
                **messages.roulette_single_bet_confirmation(is_valid=False, category="bet"), ephemeral=True
            )
        is_enough_balance = utils.is_enough_balance(interaction.user, bet, self.roulette_game.overall_bet())
        if not is_enough_balance:
            return await interaction.followup.send(
                **messages.roulette_single_bet_confirmation(is_valid=False, category="balance"), ephemeral=True
            )
        self.roulette_game.place_bet(category=self.DESCRIPTION[self.bet_type][1], value=self.bet_type, amount=bet)
        await interaction.followup.send(
            **messages.roulette_single_bet_confirmation(), ephemeral=True
        )


class RouletteTrinaryBetModal(nextcord.ui.Modal):
    DESCRIPTION = {
        'dozen': {'title': "–¥—é–∂–∏–Ω—É", 'placeholder': "–¥—é–∂–∏–Ω—ã"},
        'row': {'title': "—Ä—è–¥", 'placeholder': "—Ä—è–¥–∞"},
    }

    def __init__(self, bet_type, roulette_game):
        super().__init__(f"–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É –Ω–∞ {self.DESCRIPTION[bet_type]['title']}")
        self.bet_type = bet_type
        self.roulette_game = roulette_game

        self.number_of_range = nextcord.ui.TextInput(
            label=f"–ù–æ–º–µ—Ä {self.DESCRIPTION[bet_type]['placeholder']}",
            max_length=1,
            required=True,
            placeholder=f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä {self.DESCRIPTION[bet_type]['placeholder']} –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 3",
            style=nextcord.TextInputStyle.short
        )
        self.add_item(self.number_of_range)
        self.bet_amount = nextcord.ui.TextInput(
            label="–í–µ–ª–∏—á–∏–Ω–∞ —Å—Ç–∞–≤–∫–∏",
            max_length=2,
            required=True,
            placeholder=f"–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 25 –ª—è–≥—É—à–µ–∫",
            style=nextcord.TextInputStyle.short
        )
        self.add_item(self.bet_amount)

    async def callback(self, interaction: nextcord.Interaction) -> None:
        await interaction.response.defer()
        number_of_range = utils.get_valid_field(self.number_of_range.value, field_type="trinary")
        if number_of_range is False:
            return await interaction.followup.send(
                **messages.roulette_single_bet_confirmation(is_valid=False, category="trinary"), ephemeral=True
            )
        bet = utils.get_valid_bet(self.bet_amount.value, limit=25)
        if not bet:
            return await interaction.followup.send(
                **messages.roulette_single_bet_confirmation(is_valid=False, category="bet"), ephemeral=True
            )
        is_enough_balance = utils.is_enough_balance(interaction.user, bet, self.roulette_game.overall_bet())
        if not is_enough_balance:
            return await interaction.followup.send(
                **messages.roulette_single_bet_confirmation(is_valid=False, category="balance"), ephemeral=True
            )
        self.roulette_game.place_bet(category=self.bet_type, value=number_of_range, amount=bet)
        await interaction.followup.send(
            **messages.roulette_single_bet_confirmation(), ephemeral=True
        )

class RouletteSixlineBetModal(nextcord.ui.Modal):
    def __init__(self, roulette_game):
        super().__init__(f"–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É –Ω–∞ —Å–∏–∫—Å–ª–∞–π–Ω")
        self.roulette_game = roulette_game

        self.number_of_range = nextcord.ui.TextInput(
            label=f"–ù–æ–º–µ—Ä —Å–∏–∫—Å–ª–∞–π–Ω–∞",
            max_length=1,
            required=True,
            placeholder=f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–∏–∫—Å–ª–∞–π–Ω–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 6",
            style=nextcord.TextInputStyle.short
        )
        self.add_item(self.number_of_range)
        self.bet_amount = nextcord.ui.TextInput(
            label="–í–µ–ª–∏—á–∏–Ω–∞ —Å—Ç–∞–≤–∫–∏",
            max_length=2,
            required=True,
            placeholder=f"–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 25 –ª—è–≥—É—à–µ–∫",
            style=nextcord.TextInputStyle.short
        )
        self.add_item(self.bet_amount)

    async def callback(self, interaction: nextcord.Interaction) -> None:
        await interaction.response.defer()
        sixline = utils.get_valid_field(self.number_of_range.value, field_type="sixline")
        if sixline is False:
            return await interaction.followup.send(
                **messages.roulette_single_bet_confirmation(is_valid=False, category="sixline"), ephemeral=True
            )
        bet = utils.get_valid_bet(self.bet_amount.value, limit=25)
        if not bet:
            return await interaction.followup.send(
                **messages.roulette_single_bet_confirmation(is_valid=False, category="bet"), ephemeral=True
            )
        is_enough_balance = utils.is_enough_balance(interaction.user, bet, self.roulette_game.overall_bet())
        if not is_enough_balance:
            return await interaction.followup.send(
                **messages.roulette_single_bet_confirmation(is_valid=False, category="balance"), ephemeral=True
            )
        self.roulette_game.place_bet(category="sixline", value=sixline, amount=bet)
        await interaction.followup.send(
            **messages.roulette_single_bet_confirmation(), ephemeral=True
        )


class RouletteBetsConfirmView(nextcord.ui.View):
    def __init__(self, player, roulette_game):
        super().__init__(timeout=None)
        self.player = player
        self.roulette_game = roulette_game

    @nextcord.ui.button(label="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å—Ç–∞–≤–∫–∏", style=nextcord.ButtonStyle.green, emoji="‚úÖ")
    async def confirm_bets_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        total_bets = self.roulette_game.overall_bet()
        player_balance = sql.get_user_balance(self.player)
        if player_balance - total_bets < 0:
            return await interaction.edit_original_message(**messages.balance_error(), view=None)
        self.roulette_game.spin()
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {self.player.name} –∏–≥—Ä–∞–µ—Ç –≤ —Ä—É–ª–µ—Ç–∫—É.")
        number, color = self.roulette_game.result, self.roulette_game.COLORS[self.roulette_game.result]
        payout = self.roulette_game.calculate_payout()
        income = payout["total_winnings"] - total_bets
        if income:
            sql.set_user_balance(self.player, income)
        outcome = "–≤—ã–∏–≥—Ä–∞–ª" if income > 0 else "–ø—Ä–æ–∏–≥—Ä–∞–ª"
        if income != 0:
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {self.player.name} {outcome} –ª—è–≥—É—à–µ–∫ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ {abs(income)} —à—Ç.")
        await interaction.edit_original_message(
            **messages.roulette_result(self.player, number, color, total_bets, payout),
            view=None
        )

    @nextcord.ui.button(label="–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∏–≥—Ä—ã –≤ —Ä—É–ª–µ—Ç–∫—É", style=nextcord.ButtonStyle.gray, emoji="‚ùå")
    async def close_roulette_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        bot.gambling_pool[self.player]['roulette'] = None
        await interaction.delete_original_message()


class RouletteNoBetsView(nextcord.ui.View):
    def __init__(self, player, roulette_game):
        super().__init__(timeout=None)
        self.player = player
        self.roulette_game = roulette_game

    @nextcord.ui.button(label="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å—Ç–∞–≤–∫–∞–º", style=nextcord.ButtonStyle.green, emoji="‚óÄÔ∏è")
    async def return_to_bets_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        await interaction.edit_original_message(
            **messages.roulette(),
            view=RouletteBetsView(self.player, self.roulette_game)
        )

    @nextcord.ui.button(label="–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∏–≥—Ä—ã –≤ —Ä—É–ª–µ—Ç–∫—É", style=nextcord.ButtonStyle.gray, emoji="‚ùå")
    async def close_roulette_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        bot.gambling_pool[self.player]['roulette'] = None
        await interaction.delete_original_message()

############################### –û–î–ù–û–†–£–ö–ò–ô –ë–ê–ù–î–ò–¢ ############################

class SlotMachineView(nextcord.ui.View):
    def __init__(self, player, slot_machine_game):
        super().__init__(timeout=None)
        self.player = player
        self.slot_machine_game = slot_machine_game

    @nextcord.ui.button(label="–ñ–∞–±–∏–π —á–≤—è–∫", style=nextcord.ButtonStyle.blurple, emoji="üíµ")
    async def cheap_version_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        self.slot_machine_game.place_bet('low')
        sql.set_user_balance(self.player, -self.slot_machine_game.BETS['low'])
        self.slot_machine_game.play()
        winning = self.slot_machine_game.winning
        reels = self.slot_machine_game.reels
        central_line = reels[1]
        await interaction.edit_original_message(
            **messages.slot_machine_result(self.player, reels, central_line, winning), view=None
        )

    @nextcord.ui.button(label="–û—Ç—á–∞—è–Ω–Ω—ã–π –∫–æ–≤–±–æ–π", style=nextcord.ButtonStyle.blurple, emoji="üí∞")
    async def expensive_version_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        self.slot_machine_game.place_bet('high')
        sql.set_user_balance(self.player, -self.slot_machine_game.BETS['high'])
        self.slot_machine_game.play()
        winning = self.slot_machine_game.winning
        reels = self.slot_machine_game.reels
        central_line = reels[1]
        await interaction.edit_original_message(
            **messages.slot_machine_result(self.player, reels, central_line, winning), view=None
        )

    @nextcord.ui.button(label="–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∏–≥—Ä—ã", style=nextcord.ButtonStyle.gray, emoji="‚ùå")
    async def close_slot_machine_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        bot.gambling_pool[self.player]['slot_machine'] = None
        await interaction.delete_original_message()

############################### –ü–û–ö–ï–† –ù–ê –ö–û–°–¢–Ø–• ############################

class YahtzeeView(nextcord.ui.View):
    def __init__(self, player, yahtzee_game):
        super().__init__(timeout=None)
        self.player = player
        self.yahtzee_game = yahtzee_game

    @nextcord.ui.button(label="–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É", style=nextcord.ButtonStyle.blurple, emoji="üíµ")
    async def place_bet_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.send_modal(YahtzeeBetModal(self.yahtzee_game))

    @nextcord.ui.button(label="–ë—Ä–æ—Å–∏—Ç—å –∫–æ—Å—Ç–∏", style=nextcord.ButtonStyle.blurple, emoji="üé≤")
    async def roll_dice_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        if self.yahtzee_game.bet == 0:
            return await interaction.followup.send(**messages.yahtzee_no_bet_error(), ephemeral=True)
        player_balance = sql.get_user_balance(self.player)
        if player_balance - self.yahtzee_game.bet < 0:
            return await interaction.edit_original_message(**messages.balance_error(), view=None)
        sql.set_user_balance(self.player, -self.yahtzee_game.bet)
        self.yahtzee_game.roll_dice()
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {self.player.name} –∏–≥—Ä–∞–µ—Ç –≤ –ø–æ–∫–µ—Ä –Ω–∞ –∫–æ—Å—Ç—è—Ö.")
        first_roll_result = self.yahtzee_game.dice
        self.yahtzee_game.draw()
        self.yahtzee_game.check_winning_combinations()
        winning_combination = self.yahtzee_game.winning_combination
        if not winning_combination:
            await interaction.edit_original_message(
                **messages.yahtzee_roll_result_no_winning(final_roll=False, dice=first_roll_result),
                view=YahtzeeRerollView(self.player, self.yahtzee_game))
        else:
            self.yahtzee_game.calculate_winnings()
            winnings = self.yahtzee_game.winnings
            sql.set_user_balance(self.player, winnings)
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {self.player.name} –≤—ã–∏–≥—Ä–∞–ª –≤ –ø–æ–∫–µ—Ä –Ω–∞ –∫–æ—Å—Ç—è—Ö –ª—è–≥—É—à–µ–∫ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ {winnings - self.yahtzee_game.bet} —à—Ç.")
            return await interaction.edit_original_message(
                **messages.yahtzee_roll_result_winning(self.player, winning_combination, self.yahtzee_game.bet, winnings, first_roll_result), view=None)

    @nextcord.ui.button(label="–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∏–≥—Ä—ã", style=nextcord.ButtonStyle.gray, emoji="‚ùå")
    async def close_yahtzee_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        bot.gambling_pool[self.player]['yahtzee'] = None
        await interaction.delete_original_message()


class YahtzeeBetModal(nextcord.ui.Modal):
    def __init__(self, yahtzee_game):
        super().__init__(f"–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É")
        self.yahtzee_game = yahtzee_game

        self.bet_amount = nextcord.ui.TextInput(
            label="–í–µ–ª–∏—á–∏–Ω–∞ —Å—Ç–∞–≤–∫–∏",
            max_length=2,
            required=True,
            placeholder=f"–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 3 –¥–æ 15 –ª—è–≥—É—à–µ–∫",
            style=nextcord.TextInputStyle.short
        )
        self.add_item(self.bet_amount)

    async def callback(self, interaction: nextcord.Interaction) -> None:
        await interaction.response.defer()
        bet = utils.get_valid_bet(self.bet_amount.value, lower_limit=3, limit=15)
        if not bet:
            return await interaction.followup.send(
                **messages.roulette_single_bet_confirmation(is_valid=False, category="bet"), ephemeral=True
            )
        is_enough_balance = utils.is_enough_balance(interaction.user, bet)
        if not is_enough_balance:
            return await interaction.followup.send(
                **messages.roulette_single_bet_confirmation(is_valid=False, category="balance"), ephemeral=True
            )
        self.yahtzee_game.place_bet(amount=bet)
        await interaction.followup.send(
            **messages.roulette_single_bet_confirmation(), ephemeral=True
        )

class YahtzeeRerollView(nextcord.ui.View):
    def __init__(self, player, yahtzee_game):
        super().__init__(timeout=None)
        self.player = player
        self.yahtzee_game = yahtzee_game

    @nextcord.ui.button(label="1", style=nextcord.ButtonStyle.blurple, emoji="üé≤")
    async def one_dice_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        if len(self.yahtzee_game.reroll_indexes) < 2:
            self.yahtzee_game.set_reroll(0)
            button.disabled = True
            await interaction.message.edit(view=self)
            return await interaction.followup.send(**messages.yahtzee_reroll_set(0), ephemeral=True)
        else:
            return await interaction.followup.send(**messages.yahtzee_reroll_error(), ephemeral=True)

    @nextcord.ui.button(label="2", style=nextcord.ButtonStyle.blurple, emoji="üé≤")
    async def two_dice_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        if len(self.yahtzee_game.reroll_indexes) < 2:
            self.yahtzee_game.set_reroll(1)
            button.disabled = True
            await interaction.message.edit(view=self)
            return await interaction.followup.send(**messages.yahtzee_reroll_set(1), ephemeral=True)
        else:
            return await interaction.followup.send(**messages.yahtzee_reroll_error(), ephemeral=True)

    @nextcord.ui.button(label="3", style=nextcord.ButtonStyle.blurple, emoji="üé≤")
    async def three_dice_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        if len(self.yahtzee_game.reroll_indexes) < 2:
            self.yahtzee_game.set_reroll(2)
            button.disabled = True
            await interaction.message.edit(view=self)
            return await interaction.followup.send(**messages.yahtzee_reroll_set(2), ephemeral=True)
        else:
            return await interaction.followup.send(**messages.yahtzee_reroll_error(), ephemeral=True)

    @nextcord.ui.button(label="4", style=nextcord.ButtonStyle.blurple, emoji="üé≤")
    async def four_dice_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        if len(self.yahtzee_game.reroll_indexes) < 2:
            self.yahtzee_game.set_reroll(3)
            button.disabled = True
            await interaction.message.edit(view=self)
            return await interaction.followup.send(**messages.yahtzee_reroll_set(3), ephemeral=True)
        else:
            return await interaction.followup.send(**messages.yahtzee_reroll_error(), ephemeral=True)

    @nextcord.ui.button(label="5", style=nextcord.ButtonStyle.blurple, emoji="üé≤")
    async def five_dice_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        if len(self.yahtzee_game.reroll_indexes) < 2:
            self.yahtzee_game.set_reroll(4)
            button.disabled = True
            await interaction.message.edit(view=self)
            return await interaction.followup.send(**messages.yahtzee_reroll_set(4), ephemeral=True)
        else:
            return await interaction.followup.send(**messages.yahtzee_reroll_error(), ephemeral=True)

    @nextcord.ui.button(label="–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –±—Ä–æ—Å–æ–∫", style=nextcord.ButtonStyle.green, emoji="‚úÖ", row=4)
    async def reroll_dice_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        if len(self.yahtzee_game.reroll_indexes) == 0:
            return await interaction.followup.send(**messages.yahtzee_reroll_error(is_filled=False), ephemeral=True)
        player_balance = sql.get_user_balance(self.player)
        if player_balance - self.yahtzee_game.bet < 0:
            return await interaction.edit_original_message(**messages.balance_error(), view=None)
        self.yahtzee_game.reroll_dice()
        final_roll_result = self.yahtzee_game.dice
        self.yahtzee_game.draw()
        self.yahtzee_game.check_winning_combinations()
        winning_combination = self.yahtzee_game.winning_combination
        if not winning_combination:
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {self.player.name} –ø—Ä–æ–∏–≥—Ä–∞–ª –≤ –ø–æ–∫–µ—Ä –Ω–∞ –∫–æ—Å—Ç—è—Ö –ª—è–≥—É—à–µ–∫ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ {self.yahtzee_game.bet} —à—Ç.")
            await interaction.edit_original_message(
                **messages.yahtzee_roll_result_no_winning(self.player, final_roll=True, bet=self.yahtzee_game.bet, dice=final_roll_result),
                view=None)
        else:
            self.yahtzee_game.calculate_winnings()
            winnings = self.yahtzee_game.winnings
            sql.set_user_balance(self.player, winnings)
            return await interaction.edit_original_message(
                **messages.yahtzee_roll_result_winning(self.player, winning_combination, self.yahtzee_game.bet,
                                                       winnings, final_roll_result), view=None)

    @nextcord.ui.button(label="–°–¥–∞—Ç—å—Å—è –∏ —É–π—Ç–∏", style=nextcord.ButtonStyle.gray, emoji="‚ùå", row=4)
    async def close_yahtzee_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        bot.gambling_pool[self.player]['yahtzee'] = None
        await interaction.delete_original_message()